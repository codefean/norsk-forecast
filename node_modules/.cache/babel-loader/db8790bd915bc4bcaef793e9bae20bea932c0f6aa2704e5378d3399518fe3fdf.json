{"ast":null,"code":"// src/utils/transform.js\nexport function frostToGeoJSON(frostData) {\n  if (!frostData || !frostData.data) {\n    return {\n      type: \"FeatureCollection\",\n      features: []\n    };\n  }\n  return {\n    type: \"FeatureCollection\",\n    features: frostData.data\n    // ✅ Only include observations with valid geometry + coordinates\n    .filter(obs => {\n      var _obs$geometry;\n      return ((_obs$geometry = obs.geometry) === null || _obs$geometry === void 0 ? void 0 : _obs$geometry.type) === \"Point\" && Array.isArray(obs.geometry.coordinates) && obs.geometry.coordinates.length === 2;\n    }).map(obs => {\n      var _getValue, _getValue2, _getValue3;\n      // Find values dynamically from observations array\n      const getValue = id => {\n        var _obs$observations, _obs$observations$fin;\n        return (_obs$observations = obs.observations) === null || _obs$observations === void 0 ? void 0 : (_obs$observations$fin = _obs$observations.find(o => o.elementId === id)) === null || _obs$observations$fin === void 0 ? void 0 : _obs$observations$fin.value;\n      };\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: obs.geometry.coordinates // Frost gives [lon, lat]\n        },\n        properties: {\n          snow_depth: (_getValue = getValue(\"snow_depth\")) !== null && _getValue !== void 0 ? _getValue : 0,\n          precipitation_type: (_getValue2 = getValue(\"precipitation_type\")) !== null && _getValue2 !== void 0 ? _getValue2 : \"none\",\n          wind_speed: (_getValue3 = getValue(\"wind_speed\")) !== null && _getValue3 !== void 0 ? _getValue3 : 0,\n          referenceTime: obs.referenceTime,\n          sourceId: obs.sourceId\n        }\n      };\n    })\n  };\n}","map":{"version":3,"names":["frostToGeoJSON","frostData","data","type","features","filter","obs","_obs$geometry","geometry","Array","isArray","coordinates","length","map","_getValue","_getValue2","_getValue3","getValue","id","_obs$observations","_obs$observations$fin","observations","find","o","elementId","value","properties","snow_depth","precipitation_type","wind_speed","referenceTime","sourceId"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/utils/transform.js"],"sourcesContent":["// src/utils/transform.js\nexport function frostToGeoJSON(frostData) {\n  if (!frostData || !frostData.data) {\n    return { type: \"FeatureCollection\", features: [] };\n  }\n\n  return {\n    type: \"FeatureCollection\",\n    features: frostData.data\n      // ✅ Only include observations with valid geometry + coordinates\n      .filter(\n        obs =>\n          obs.geometry?.type === \"Point\" &&\n          Array.isArray(obs.geometry.coordinates) &&\n          obs.geometry.coordinates.length === 2\n      )\n      .map(obs => {\n        // Find values dynamically from observations array\n        const getValue = id =>\n          obs.observations?.find(o => o.elementId === id)?.value;\n\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: obs.geometry.coordinates, // Frost gives [lon, lat]\n          },\n          properties: {\n            snow_depth: getValue(\"snow_depth\") ?? 0,\n            precipitation_type: getValue(\"precipitation_type\") ?? \"none\",\n            wind_speed: getValue(\"wind_speed\") ?? 0,\n            referenceTime: obs.referenceTime,\n            sourceId: obs.sourceId,\n          },\n        };\n      }),\n  };\n}\n"],"mappings":"AAAA;AACA,OAAO,SAASA,cAAcA,CAACC,SAAS,EAAE;EACxC,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAACC,IAAI,EAAE;IACjC,OAAO;MAAEC,IAAI,EAAE,mBAAmB;MAAEC,QAAQ,EAAE;IAAG,CAAC;EACpD;EAEA,OAAO;IACLD,IAAI,EAAE,mBAAmB;IACzBC,QAAQ,EAAEH,SAAS,CAACC;IAClB;IAAA,CACCG,MAAM,CACLC,GAAG;MAAA,IAAAC,aAAA;MAAA,OACD,EAAAA,aAAA,GAAAD,GAAG,CAACE,QAAQ,cAAAD,aAAA,uBAAZA,aAAA,CAAcJ,IAAI,MAAK,OAAO,IAC9BM,KAAK,CAACC,OAAO,CAACJ,GAAG,CAACE,QAAQ,CAACG,WAAW,CAAC,IACvCL,GAAG,CAACE,QAAQ,CAACG,WAAW,CAACC,MAAM,KAAK,CAAC;IAAA,CACzC,CAAC,CACAC,GAAG,CAACP,GAAG,IAAI;MAAA,IAAAQ,SAAA,EAAAC,UAAA,EAAAC,UAAA;MACV;MACA,MAAMC,QAAQ,GAAGC,EAAE;QAAA,IAAAC,iBAAA,EAAAC,qBAAA;QAAA,QAAAD,iBAAA,GACjBb,GAAG,CAACe,YAAY,cAAAF,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKN,EAAE,CAAC,cAAAE,qBAAA,uBAA/CA,qBAAA,CAAiDK,KAAK;MAAA;MAExD,OAAO;QACLtB,IAAI,EAAE,SAAS;QACfK,QAAQ,EAAE;UACRL,IAAI,EAAE,OAAO;UACbQ,WAAW,EAAEL,GAAG,CAACE,QAAQ,CAACG,WAAW,CAAE;QACzC,CAAC;QACDe,UAAU,EAAE;UACVC,UAAU,GAAAb,SAAA,GAAEG,QAAQ,CAAC,YAAY,CAAC,cAAAH,SAAA,cAAAA,SAAA,GAAI,CAAC;UACvCc,kBAAkB,GAAAb,UAAA,GAAEE,QAAQ,CAAC,oBAAoB,CAAC,cAAAF,UAAA,cAAAA,UAAA,GAAI,MAAM;UAC5Dc,UAAU,GAAAb,UAAA,GAAEC,QAAQ,CAAC,YAAY,CAAC,cAAAD,UAAA,cAAAA,UAAA,GAAI,CAAC;UACvCc,aAAa,EAAExB,GAAG,CAACwB,aAAa;UAChCC,QAAQ,EAAEzB,GAAG,CAACyB;QAChB;MACF,CAAC;IACH,CAAC;EACL,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}