{"ast":null,"code":"// src/utils/geojsonUtils.js\n\n/**\n * Convert Frost API station data into valid GeoJSON\n * Automatically cleans up invalid features\n */\nexport const frostToGeoJSON = stations => {\n  const features = stations.filter(station => {\n    var _station$geometry;\n    const coords = (_station$geometry = station.geometry) === null || _station$geometry === void 0 ? void 0 : _station$geometry.coordinates;\n    const valid = coords && Array.isArray(coords) && coords.length === 2 && typeof coords[0] === \"number\" && typeof coords[1] === \"number\";\n    if (!valid) {\n      console.warn(`⚠️ Skipping invalid station: ${station.id || \"unknown\"}`);\n    }\n    return valid;\n  }).map(station => ({\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: station.geometry.coordinates\n    },\n    properties: {\n      id: station.id,\n      name: station.name,\n      shortName: station.shortName || \"Unknown\",\n      country: station.country || \"Norway\"\n    }\n  }));\n  console.log(`✅ Converted ${features.length} valid stations into GeoJSON`);\n  return {\n    type: \"FeatureCollection\",\n    features\n  };\n};","map":{"version":3,"names":["frostToGeoJSON","stations","features","filter","station","_station$geometry","coords","geometry","coordinates","valid","Array","isArray","length","console","warn","id","map","type","properties","name","shortName","country","log"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/pages/geojsonUtils.js"],"sourcesContent":["// src/utils/geojsonUtils.js\n\n/**\n * Convert Frost API station data into valid GeoJSON\n * Automatically cleans up invalid features\n */\nexport const frostToGeoJSON = (stations) => {\n  const features = stations\n    .filter((station) => {\n      const coords = station.geometry?.coordinates;\n      const valid =\n        coords &&\n        Array.isArray(coords) &&\n        coords.length === 2 &&\n        typeof coords[0] === \"number\" &&\n        typeof coords[1] === \"number\";\n\n      if (!valid) {\n        console.warn(`⚠️ Skipping invalid station: ${station.id || \"unknown\"}`);\n      }\n      return valid;\n    })\n    .map((station) => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: station.geometry.coordinates,\n      },\n      properties: {\n        id: station.id,\n        name: station.name,\n        shortName: station.shortName || \"Unknown\",\n        country: station.country || \"Norway\",\n      },\n    }));\n\n  console.log(`✅ Converted ${features.length} valid stations into GeoJSON`);\n  return { type: \"FeatureCollection\", features };\n};\n"],"mappings":"AAAA;;AAEA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAIC,QAAQ,IAAK;EAC1C,MAAMC,QAAQ,GAAGD,QAAQ,CACtBE,MAAM,CAAEC,OAAO,IAAK;IAAA,IAAAC,iBAAA;IACnB,MAAMC,MAAM,IAAAD,iBAAA,GAAGD,OAAO,CAACG,QAAQ,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,WAAW;IAC5C,MAAMC,KAAK,GACTH,MAAM,IACNI,KAAK,CAACC,OAAO,CAACL,MAAM,CAAC,IACrBA,MAAM,CAACM,MAAM,KAAK,CAAC,IACnB,OAAON,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAC7B,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ;IAE/B,IAAI,CAACG,KAAK,EAAE;MACVI,OAAO,CAACC,IAAI,CAAC,gCAAgCV,OAAO,CAACW,EAAE,IAAI,SAAS,EAAE,CAAC;IACzE;IACA,OAAON,KAAK;EACd,CAAC,CAAC,CACDO,GAAG,CAAEZ,OAAO,KAAM;IACjBa,IAAI,EAAE,SAAS;IACfV,QAAQ,EAAE;MACRU,IAAI,EAAE,OAAO;MACbT,WAAW,EAAEJ,OAAO,CAACG,QAAQ,CAACC;IAChC,CAAC;IACDU,UAAU,EAAE;MACVH,EAAE,EAAEX,OAAO,CAACW,EAAE;MACdI,IAAI,EAAEf,OAAO,CAACe,IAAI;MAClBC,SAAS,EAAEhB,OAAO,CAACgB,SAAS,IAAI,SAAS;MACzCC,OAAO,EAAEjB,OAAO,CAACiB,OAAO,IAAI;IAC9B;EACF,CAAC,CAAC,CAAC;EAELR,OAAO,CAACS,GAAG,CAAC,eAAepB,QAAQ,CAACU,MAAM,8BAA8B,CAAC;EACzE,OAAO;IAAEK,IAAI,EAAE,mBAAmB;IAAEf;EAAS,CAAC;AAChD,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}