{"ast":null,"code":"// src/api/frostApi.js\n\nexport async function fetchStations() {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n  const res = await fetch(\"https://frost.met.no/sources/v0.jsonld?types=SensorSystem&country=NO\", {\n    headers: {\n      \"Authorization\": \"Basic \" + btoa(clientId + \":\"),\n      \"Accept\": \"application/json\"\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch stations\");\n  return await res.json();\n}\nexport async function fetchObservations(stationIds) {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n  const sources = stationIds.join(\",\");\n  const url = \"https://frost.met.no/observations/v0.jsonld?sources=\" + sources + \"&elements=snow_depth,precipitation_type,wind_speed&referencetime=latest\";\n  const res = await fetch(url, {\n    headers: {\n      \"Authorization\": \"Basic \" + btoa(clientId + \":\"),\n      \"Accept\": \"application/json\"\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch observations\");\n  return await res.json();\n}","map":{"version":3,"names":["fetchStations","clientId","process","env","REACT_APP_FROST_CLIENT_ID","res","fetch","headers","btoa","ok","Error","json","fetchObservations","stationIds","sources","join","url"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/api/frostApi.js"],"sourcesContent":["// src/api/frostApi.js\n\nexport async function fetchStations() {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n\n  const res = await fetch(\n    \"https://frost.met.no/sources/v0.jsonld?types=SensorSystem&country=NO\",\n    {\n      headers: {\n        \"Authorization\": \"Basic \" + btoa(clientId + \":\"),\n        \"Accept\": \"application/json\",\n      },\n    }\n  );\n\n  if (!res.ok) throw new Error(\"Failed to fetch stations\");\n  return await res.json();\n}\n\nexport async function fetchObservations(stationIds) {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n  const sources = stationIds.join(\",\");\n\n  const url =\n    \"https://frost.met.no/observations/v0.jsonld?sources=\" +\n    sources +\n    \"&elements=snow_depth,precipitation_type,wind_speed&referencetime=latest\";\n\n  const res = await fetch(url, {\n    headers: {\n      \"Authorization\": \"Basic \" + btoa(clientId + \":\"),\n      \"Accept\": \"application/json\",\n    },\n  });\n\n  if (!res.ok) throw new Error(\"Failed to fetch observations\");\n  return await res.json();\n}\n"],"mappings":"AAAA;;AAEA,OAAO,eAAeA,aAAaA,CAAA,EAAG;EACpC,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAEtD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,sEAAsE,EACtE;IACEC,OAAO,EAAE;MACP,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAACP,QAAQ,GAAG,GAAG,CAAC;MAChD,QAAQ,EAAE;IACZ;EACF,CACF,CAAC;EAED,IAAI,CAACI,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAO,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;AACzB;AAEA,OAAO,eAAeC,iBAAiBA,CAACC,UAAU,EAAE;EAClD,MAAMZ,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EACtD,MAAMU,OAAO,GAAGD,UAAU,CAACE,IAAI,CAAC,GAAG,CAAC;EAEpC,MAAMC,GAAG,GACP,sDAAsD,GACtDF,OAAO,GACP,yEAAyE;EAE3E,MAAMT,GAAG,GAAG,MAAMC,KAAK,CAACU,GAAG,EAAE;IAC3BT,OAAO,EAAE;MACP,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAACP,QAAQ,GAAG,GAAG,CAAC;MAChD,QAAQ,EAAE;IACZ;EACF,CAAC,CAAC;EAEF,IAAI,CAACI,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,OAAO,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;AACzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}