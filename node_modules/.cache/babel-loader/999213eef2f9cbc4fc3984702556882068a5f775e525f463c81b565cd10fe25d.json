{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Directly use your Mapbox token\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  // Convert Frost API data to GeoJSON\n  const frostToGeoJSON = stations => ({\n    type: \"FeatureCollection\",\n    features: stations.map(station => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: station.geometry.coordinates\n      },\n      properties: {\n        id: station.id,\n        name: station.name\n      }\n    }))\n  });\n\n  // Fetch station data from Frost API using hardcoded credentials\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(\"12f68031-8ce7-48c7-bc7a-38b843f53711:08a75b8d-ca70-44a9-807d-d79421c082bf\");\n      const response = await fetch(\"https://frost.met.no/sources/v0.jsonld?types=SensorSystem\", {\n        headers: {\n          Authorization: `Basic ${frostAuth}`\n        }\n      });\n      const data = await response.json();\n      return data.data || [];\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n      return [];\n    }\n  };\n\n  // Initialize the map and add station data\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return; // Prevent duplicate initialization\n\n      // Create Mapbox map instance\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        // Oslo center\n        zoom: 5\n      });\n\n      // Fetch Frost stations and convert to GeoJSON\n      const stations = await fetchStations();\n      const geojson = frostToGeoJSON(stations);\n\n      // Add stations layer once map loads\n      mapRef.current.on(\"load\", () => {\n        // Add GeoJSON source\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson\n        });\n\n        // Add circle markers for stations\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": 5,\n            \"circle-color\": \"#007cbf\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\"\n          }\n        });\n\n        // Show popup on click\n        mapRef.current.on(\"click\", \"stations-layer\", e => {\n          const props = e.features[0].properties;\n          const coords = e.features[0].geometry.coordinates;\n          new mapboxgl.Popup().setLngLat(coords).setHTML(`<strong>${props.name}</strong><br>ID: ${props.id}`).addTo(mapRef.current);\n        });\n\n        // Change cursor when hovering over stations\n        mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"pointer\";\n        });\n        mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"\";\n        });\n      });\n    };\n    initMap();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"trBYWQnBQabdsyB7ysINFei525A=\");\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","mapboxgl","jsxDEV","_jsxDEV","accessToken","WeatherStationsMap","_s","mapContainer","mapRef","frostToGeoJSON","stations","type","features","map","station","geometry","coordinates","properties","id","name","fetchStations","frostAuth","btoa","response","fetch","headers","Authorization","data","json","error","console","initMap","current","Map","container","style","center","zoom","geojson","on","addSource","addLayer","source","paint","e","props","coords","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Directly use your Mapbox token\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  // Convert Frost API data to GeoJSON\n  const frostToGeoJSON = (stations) => ({\n    type: \"FeatureCollection\",\n    features: stations.map((station) => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: station.geometry.coordinates,\n      },\n      properties: {\n        id: station.id,\n        name: station.name,\n      },\n    })),\n  });\n\n  // Fetch station data from Frost API using hardcoded credentials\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(\n        \"12f68031-8ce7-48c7-bc7a-38b843f53711:08a75b8d-ca70-44a9-807d-d79421c082bf\"\n      );\n\n      const response = await fetch(\n        \"https://frost.met.no/sources/v0.jsonld?types=SensorSystem\",\n        {\n          headers: {\n            Authorization: `Basic ${frostAuth}`,\n          },\n        }\n      );\n\n      const data = await response.json();\n      return data.data || [];\n    } catch (error) {\n      console.error(\"Error fetching stations:\", error);\n      return [];\n    }\n  };\n\n  // Initialize the map and add station data\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return; // Prevent duplicate initialization\n\n      // Create Mapbox map instance\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91], // Oslo center\n        zoom: 5,\n      });\n\n      // Fetch Frost stations and convert to GeoJSON\n      const stations = await fetchStations();\n      const geojson = frostToGeoJSON(stations);\n\n      // Add stations layer once map loads\n      mapRef.current.on(\"load\", () => {\n        // Add GeoJSON source\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson,\n        });\n\n        // Add circle markers for stations\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": 5,\n            \"circle-color\": \"#007cbf\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n          },\n        });\n\n        // Show popup on click\n        mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n          const props = e.features[0].properties;\n          const coords = e.features[0].geometry.coordinates;\n\n          new mapboxgl.Popup()\n            .setLngLat(coords)\n            .setHTML(`<strong>${props.name}</strong><br>ID: ${props.id}`)\n            .addTo(mapRef.current);\n        });\n\n        // Change cursor when hovering over stations\n        mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"pointer\";\n        });\n\n        mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"\";\n        });\n      });\n    };\n\n    initMap();\n  }, []);\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}