{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './glaciers.css';\nconst glacierTileset = {\n  url: 'mapbox://mapfean.bmdn0gwv',\n  sourceLayer: 'scandi_glaciers2',\n  sourceId: 'glaciers',\n  fillLayerId: 'glacier-fill-layer',\n  lineLayerId: 'glacier-line-layer'\n};\nconst glacierTileset2 = {\n  url: 'mapbox://mapfean.bmdn0gwv',\n  sourceLayer: 'svalbard_glaciers2',\n  sourceId: 'glaciers',\n  fillLayerId: 'glacier-fill-layer',\n  lineLayerId: 'glacier-line-layer'\n};\nexport function useGlacierLayer({\n  mapRef\n}) {\n  _s();\n  useEffect(() => {\n    const map = mapRef === null || mapRef === void 0 ? void 0 : mapRef.current;\n    if (!map) return;\n    const {\n      url,\n      sourceId,\n      sourceLayer,\n      fillLayerId,\n      lineLayerId\n    } = glacierTileset;\n    const onLoad = () => {\n      // Add glacier source\n      if (!map.getSource(sourceId)) {\n        map.addSource(sourceId, {\n          type: 'vector',\n          url\n        });\n      }\n\n      // Add fill layer\n      if (!map.getLayer(fillLayerId)) {\n        map.addLayer({\n          id: fillLayerId,\n          type: 'fill',\n          source: sourceId,\n          'source-layer': sourceLayer,\n          paint: {\n            'fill-color': '#2ba0ff',\n            'fill-opacity': 0.01\n          }\n        });\n      }\n\n      // Add outline layer\n      if (!map.getLayer(lineLayerId)) {\n        map.addLayer({\n          id: lineLayerId,\n          type: 'line',\n          source: sourceId,\n          'source-layer': sourceLayer,\n          paint: {\n            'line-color': '#000000ff',\n            'line-width': 20\n          }\n        });\n      }\n\n      // Always make layers visible\n      map.setLayoutProperty(fillLayerId, 'visibility', 'visible');\n      map.setLayoutProperty(lineLayerId, 'visibility', 'visible');\n\n      // Create a popup for glacier names\n      const popup = new mapboxgl.Popup({\n        closeButton: false,\n        closeOnClick: false,\n        offset: 10,\n        className: 'glacier-popup'\n      });\n\n      // Mouse move over glaciers only\n      map.on('mousemove', e => {\n        var _features$0$propertie;\n        // Query **only the glacier fill layer**\n        const features = map.queryRenderedFeatures(e.point, {\n          layers: [fillLayerId]\n        });\n\n        // If hovering on anything that's NOT a glacier, remove popup\n        if (!features.length) {\n          popup.remove();\n          return;\n        }\n        const glacName = (_features$0$propertie = features[0].properties) === null || _features$0$propertie === void 0 ? void 0 : _features$0$propertie.glac_name;\n\n        // If glacier has a name, show it — otherwise hide the popup\n        if (glacName && glacName.trim() !== '') {\n          popup.setLngLat(e.lngLat).setHTML(`<div class=\"glacier-label\">${glacName}</div>`).addTo(map);\n        } else {\n          popup.remove();\n        }\n      });\n\n      // Remove popup when leaving glacier area\n      map.on('mouseleave', fillLayerId, () => {\n        popup.remove();\n      });\n    };\n    if (map.isStyleLoaded()) {\n      onLoad();\n    } else {\n      map.on('load', onLoad);\n    }\n    return () => {\n      map.off('load', onLoad);\n    };\n  }, [mapRef]);\n}\n_s(useGlacierLayer, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");","map":{"version":3,"names":["useEffect","mapboxgl","glacierTileset","url","sourceLayer","sourceId","fillLayerId","lineLayerId","glacierTileset2","useGlacierLayer","mapRef","_s","map","current","onLoad","getSource","addSource","type","getLayer","addLayer","id","source","paint","setLayoutProperty","popup","Popup","closeButton","closeOnClick","offset","className","on","e","_features$0$propertie","features","queryRenderedFeatures","point","layers","length","remove","glacName","properties","glac_name","trim","setLngLat","lngLat","setHTML","addTo","isStyleLoaded","off"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/pages/glaciers.js"],"sourcesContent":["import { useEffect } from 'react';\nimport mapboxgl from 'mapbox-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport './glaciers.css';\n\nconst glacierTileset = {\n  url: 'mapbox://mapfean.bmdn0gwv', \n  sourceLayer: 'scandi_glaciers2',    \n  sourceId: 'glaciers',               \n  fillLayerId: 'glacier-fill-layer',\n  lineLayerId: 'glacier-line-layer',\n};\n\nconst glacierTileset2 = {\n  url: 'mapbox://mapfean.bmdn0gwv', \n  sourceLayer: 'svalbard_glaciers2',    \n  sourceId: 'glaciers',               \n  fillLayerId: 'glacier-fill-layer',\n  lineLayerId: 'glacier-line-layer',\n};\n\n\n\nexport function useGlacierLayer({ mapRef }) {\n  useEffect(() => {\n    const map = mapRef?.current;\n    if (!map) return;\n\n    const { url, sourceId, sourceLayer, fillLayerId, lineLayerId } = glacierTileset;\n\n    const onLoad = () => {\n      // Add glacier source\n      if (!map.getSource(sourceId)) {\n        map.addSource(sourceId, { type: 'vector', url });\n      }\n\n      // Add fill layer\n      if (!map.getLayer(fillLayerId)) {\n        map.addLayer({\n          id: fillLayerId,\n          type: 'fill',\n          source: sourceId,\n          'source-layer': sourceLayer,\n          paint: {\n            'fill-color': '#2ba0ff',\n            'fill-opacity': 0.01,\n          },\n        });\n      }\n\n      // Add outline layer\n      if (!map.getLayer(lineLayerId)) {\n        map.addLayer({\n          id: lineLayerId,\n          type: 'line',\n          source: sourceId,\n          'source-layer': sourceLayer,\n          paint: {\n            'line-color': '#000000ff',\n            'line-width': 20,\n          },\n        });\n      }\n\n      // Always make layers visible\n      map.setLayoutProperty(fillLayerId, 'visibility', 'visible');\n      map.setLayoutProperty(lineLayerId, 'visibility', 'visible');\n\n      // Create a popup for glacier names\n      const popup = new mapboxgl.Popup({\n        closeButton: false,\n        closeOnClick: false,\n        offset: 10,\n        className: 'glacier-popup'\n      });\n\n      // Mouse move over glaciers only\n      map.on('mousemove', (e) => {\n        // Query **only the glacier fill layer**\n        const features = map.queryRenderedFeatures(e.point, { layers: [fillLayerId] });\n\n        // If hovering on anything that's NOT a glacier, remove popup\n        if (!features.length) {\n          popup.remove();\n          return;\n        }\n\n        const glacName = features[0].properties?.glac_name;\n\n        // If glacier has a name, show it — otherwise hide the popup\n        if (glacName && glacName.trim() !== '') {\n          popup\n            .setLngLat(e.lngLat)\n            .setHTML(`<div class=\"glacier-label\">${glacName}</div>`)\n            .addTo(map);\n        } else {\n          popup.remove();\n        }\n      });\n\n      // Remove popup when leaving glacier area\n      map.on('mouseleave', fillLayerId, () => {\n        popup.remove();\n      });\n    };\n\n    if (map.isStyleLoaded()) {\n      onLoad();\n    } else {\n      map.on('load', onLoad);\n    }\n\n    return () => {\n      map.off('load', onLoad);\n    };\n  }, [mapRef]);\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,8BAA8B;AACrC,OAAO,gBAAgB;AAEvB,MAAMC,cAAc,GAAG;EACrBC,GAAG,EAAE,2BAA2B;EAChCC,WAAW,EAAE,kBAAkB;EAC/BC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,oBAAoB;EACjCC,WAAW,EAAE;AACf,CAAC;AAED,MAAMC,eAAe,GAAG;EACtBL,GAAG,EAAE,2BAA2B;EAChCC,WAAW,EAAE,oBAAoB;EACjCC,QAAQ,EAAE,UAAU;EACpBC,WAAW,EAAE,oBAAoB;EACjCC,WAAW,EAAE;AACf,CAAC;AAID,OAAO,SAASE,eAAeA,CAAC;EAAEC;AAAO,CAAC,EAAE;EAAAC,EAAA;EAC1CX,SAAS,CAAC,MAAM;IACd,MAAMY,GAAG,GAAGF,MAAM,aAANA,MAAM,uBAANA,MAAM,CAAEG,OAAO;IAC3B,IAAI,CAACD,GAAG,EAAE;IAEV,MAAM;MAAET,GAAG;MAAEE,QAAQ;MAAED,WAAW;MAAEE,WAAW;MAAEC;IAAY,CAAC,GAAGL,cAAc;IAE/E,MAAMY,MAAM,GAAGA,CAAA,KAAM;MACnB;MACA,IAAI,CAACF,GAAG,CAACG,SAAS,CAACV,QAAQ,CAAC,EAAE;QAC5BO,GAAG,CAACI,SAAS,CAACX,QAAQ,EAAE;UAAEY,IAAI,EAAE,QAAQ;UAAEd;QAAI,CAAC,CAAC;MAClD;;MAEA;MACA,IAAI,CAACS,GAAG,CAACM,QAAQ,CAACZ,WAAW,CAAC,EAAE;QAC9BM,GAAG,CAACO,QAAQ,CAAC;UACXC,EAAE,EAAEd,WAAW;UACfW,IAAI,EAAE,MAAM;UACZI,MAAM,EAAEhB,QAAQ;UAChB,cAAc,EAAED,WAAW;UAC3BkB,KAAK,EAAE;YACL,YAAY,EAAE,SAAS;YACvB,cAAc,EAAE;UAClB;QACF,CAAC,CAAC;MACJ;;MAEA;MACA,IAAI,CAACV,GAAG,CAACM,QAAQ,CAACX,WAAW,CAAC,EAAE;QAC9BK,GAAG,CAACO,QAAQ,CAAC;UACXC,EAAE,EAAEb,WAAW;UACfU,IAAI,EAAE,MAAM;UACZI,MAAM,EAAEhB,QAAQ;UAChB,cAAc,EAAED,WAAW;UAC3BkB,KAAK,EAAE;YACL,YAAY,EAAE,WAAW;YACzB,YAAY,EAAE;UAChB;QACF,CAAC,CAAC;MACJ;;MAEA;MACAV,GAAG,CAACW,iBAAiB,CAACjB,WAAW,EAAE,YAAY,EAAE,SAAS,CAAC;MAC3DM,GAAG,CAACW,iBAAiB,CAAChB,WAAW,EAAE,YAAY,EAAE,SAAS,CAAC;;MAE3D;MACA,MAAMiB,KAAK,GAAG,IAAIvB,QAAQ,CAACwB,KAAK,CAAC;QAC/BC,WAAW,EAAE,KAAK;QAClBC,YAAY,EAAE,KAAK;QACnBC,MAAM,EAAE,EAAE;QACVC,SAAS,EAAE;MACb,CAAC,CAAC;;MAEF;MACAjB,GAAG,CAACkB,EAAE,CAAC,WAAW,EAAGC,CAAC,IAAK;QAAA,IAAAC,qBAAA;QACzB;QACA,MAAMC,QAAQ,GAAGrB,GAAG,CAACsB,qBAAqB,CAACH,CAAC,CAACI,KAAK,EAAE;UAAEC,MAAM,EAAE,CAAC9B,WAAW;QAAE,CAAC,CAAC;;QAE9E;QACA,IAAI,CAAC2B,QAAQ,CAACI,MAAM,EAAE;UACpBb,KAAK,CAACc,MAAM,CAAC,CAAC;UACd;QACF;QAEA,MAAMC,QAAQ,IAAAP,qBAAA,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAACO,UAAU,cAAAR,qBAAA,uBAAtBA,qBAAA,CAAwBS,SAAS;;QAElD;QACA,IAAIF,QAAQ,IAAIA,QAAQ,CAACG,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;UACtClB,KAAK,CACFmB,SAAS,CAACZ,CAAC,CAACa,MAAM,CAAC,CACnBC,OAAO,CAAC,8BAA8BN,QAAQ,QAAQ,CAAC,CACvDO,KAAK,CAAClC,GAAG,CAAC;QACf,CAAC,MAAM;UACLY,KAAK,CAACc,MAAM,CAAC,CAAC;QAChB;MACF,CAAC,CAAC;;MAEF;MACA1B,GAAG,CAACkB,EAAE,CAAC,YAAY,EAAExB,WAAW,EAAE,MAAM;QACtCkB,KAAK,CAACc,MAAM,CAAC,CAAC;MAChB,CAAC,CAAC;IACJ,CAAC;IAED,IAAI1B,GAAG,CAACmC,aAAa,CAAC,CAAC,EAAE;MACvBjC,MAAM,CAAC,CAAC;IACV,CAAC,MAAM;MACLF,GAAG,CAACkB,EAAE,CAAC,MAAM,EAAEhB,MAAM,CAAC;IACxB;IAEA,OAAO,MAAM;MACXF,GAAG,CAACoC,GAAG,CAAC,MAAM,EAAElC,MAAM,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,CAACJ,MAAM,CAAC,CAAC;AACd;AAACC,EAAA,CA7FeF,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}