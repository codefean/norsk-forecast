{"ast":null,"code":"// transform.js\n// Utility to convert Frost API observation data into GeoJSON for Mapbox\n\n/**\n * Convert Frost API observations into GeoJSON\n * @param {Object} frostData - JSON response from Frost API\n * @returns {Object} GeoJSON FeatureCollection\n */\nexport function frostToGeoJSON(frostData) {\n  if (!frostData || !frostData.data) {\n    return {\n      type: \"FeatureCollection\",\n      features: []\n    };\n  }\n  return {\n    type: \"FeatureCollection\",\n    features: frostData.data\n    // Make sure we only include observations with valid coordinates\n    .filter(obs => {\n      var _obs$geometry, _obs$geometry$coordin;\n      return ((_obs$geometry = obs.geometry) === null || _obs$geometry === void 0 ? void 0 : (_obs$geometry$coordin = _obs$geometry.coordinates) === null || _obs$geometry$coordin === void 0 ? void 0 : _obs$geometry$coordin.length) === 2;\n    }).map(obs => {\n      var _obs$observations;\n      // Convert observations array into key-value pairs\n      const props = {};\n      (_obs$observations = obs.observations) === null || _obs$observations === void 0 ? void 0 : _obs$observations.forEach(o => {\n        props[o.elementId] = o.value;\n      });\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: obs.geometry.coordinates // Already [lon, lat]\n        },\n        properties: {\n          ...props,\n          // Include all available observation values\n          sourceId: obs.sourceId,\n          referenceTime: obs.referenceTime\n        }\n      };\n    })\n  };\n}","map":{"version":3,"names":["frostToGeoJSON","frostData","data","type","features","filter","obs","_obs$geometry","_obs$geometry$coordin","geometry","coordinates","length","map","_obs$observations","props","observations","forEach","o","elementId","value","properties","sourceId","referenceTime"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/utils/transform.js"],"sourcesContent":["// transform.js\n// Utility to convert Frost API observation data into GeoJSON for Mapbox\n\n/**\n * Convert Frost API observations into GeoJSON\n * @param {Object} frostData - JSON response from Frost API\n * @returns {Object} GeoJSON FeatureCollection\n */\nexport function frostToGeoJSON(frostData) {\n  if (!frostData || !frostData.data) {\n    return { type: \"FeatureCollection\", features: [] };\n  }\n\n  return {\n    type: \"FeatureCollection\",\n    features: frostData.data\n      // Make sure we only include observations with valid coordinates\n      .filter(obs => obs.geometry?.coordinates?.length === 2)\n      .map(obs => {\n        // Convert observations array into key-value pairs\n        const props = {};\n        obs.observations?.forEach(o => {\n          props[o.elementId] = o.value;\n        });\n\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: obs.geometry.coordinates, // Already [lon, lat]\n          },\n          properties: {\n            ...props, // Include all available observation values\n            sourceId: obs.sourceId,\n            referenceTime: obs.referenceTime,\n          },\n        };\n      }),\n  };\n}\n"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,cAAcA,CAACC,SAAS,EAAE;EACxC,IAAI,CAACA,SAAS,IAAI,CAACA,SAAS,CAACC,IAAI,EAAE;IACjC,OAAO;MAAEC,IAAI,EAAE,mBAAmB;MAAEC,QAAQ,EAAE;IAAG,CAAC;EACpD;EAEA,OAAO;IACLD,IAAI,EAAE,mBAAmB;IACzBC,QAAQ,EAAEH,SAAS,CAACC;IAClB;IAAA,CACCG,MAAM,CAACC,GAAG;MAAA,IAAAC,aAAA,EAAAC,qBAAA;MAAA,OAAI,EAAAD,aAAA,GAAAD,GAAG,CAACG,QAAQ,cAAAF,aAAA,wBAAAC,qBAAA,GAAZD,aAAA,CAAcG,WAAW,cAAAF,qBAAA,uBAAzBA,qBAAA,CAA2BG,MAAM,MAAK,CAAC;IAAA,EAAC,CACtDC,GAAG,CAACN,GAAG,IAAI;MAAA,IAAAO,iBAAA;MACV;MACA,MAAMC,KAAK,GAAG,CAAC,CAAC;MAChB,CAAAD,iBAAA,GAAAP,GAAG,CAACS,YAAY,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,OAAO,CAACC,CAAC,IAAI;QAC7BH,KAAK,CAACG,CAAC,CAACC,SAAS,CAAC,GAAGD,CAAC,CAACE,KAAK;MAC9B,CAAC,CAAC;MAEF,OAAO;QACLhB,IAAI,EAAE,SAAS;QACfM,QAAQ,EAAE;UACRN,IAAI,EAAE,OAAO;UACbO,WAAW,EAAEJ,GAAG,CAACG,QAAQ,CAACC,WAAW,CAAE;QACzC,CAAC;QACDU,UAAU,EAAE;UACV,GAAGN,KAAK;UAAE;UACVO,QAAQ,EAAEf,GAAG,CAACe,QAAQ;UACtBC,aAAa,EAAEhB,GAAG,CAACgB;QACrB;MACF,CAAC;IACH,CAAC;EACL,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}