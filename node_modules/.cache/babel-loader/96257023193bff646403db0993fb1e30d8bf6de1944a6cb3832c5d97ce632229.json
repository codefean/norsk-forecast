{"ast":null,"code":"// src/utils/transform.js\n\nexport function frostToGeoJSON(frostData) {\n  if (!frostData || !Array.isArray(frostData.data)) {\n    console.warn(\"⚠️ frostToGeoJSON: No valid data found\");\n    return {\n      type: \"FeatureCollection\",\n      features: []\n    };\n  }\n  return {\n    type: \"FeatureCollection\",\n    features: frostData.data\n    // ✅ Only include valid geometry points\n    .filter(obs => obs.geometry && obs.geometry.type === \"Point\" && Array.isArray(obs.geometry.coordinates) && obs.geometry.coordinates.length === 2).map(obs => {\n      var _getValue, _getValue2, _getValue3, _obs$sourceId, _obs$referenceTime;\n      const getValue = id => {\n        var _obs$observations, _obs$observations$fin;\n        return (_obs$observations = obs.observations) === null || _obs$observations === void 0 ? void 0 : (_obs$observations$fin = _obs$observations.find(o => o.elementId === id)) === null || _obs$observations$fin === void 0 ? void 0 : _obs$observations$fin.value;\n      };\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: obs.geometry.coordinates\n        },\n        properties: {\n          snow_depth: (_getValue = getValue(\"snow_depth\")) !== null && _getValue !== void 0 ? _getValue : 0,\n          precipitation_type: (_getValue2 = getValue(\"precipitation_type\")) !== null && _getValue2 !== void 0 ? _getValue2 : \"none\",\n          wind_speed: (_getValue3 = getValue(\"wind_speed\")) !== null && _getValue3 !== void 0 ? _getValue3 : 0,\n          sourceId: (_obs$sourceId = obs.sourceId) !== null && _obs$sourceId !== void 0 ? _obs$sourceId : \"Unknown\",\n          referenceTime: (_obs$referenceTime = obs.referenceTime) !== null && _obs$referenceTime !== void 0 ? _obs$referenceTime : \"Unknown\"\n        }\n      };\n    })\n  };\n}","map":{"version":3,"names":["frostToGeoJSON","frostData","Array","isArray","data","console","warn","type","features","filter","obs","geometry","coordinates","length","map","_getValue","_getValue2","_getValue3","_obs$sourceId","_obs$referenceTime","getValue","id","_obs$observations","_obs$observations$fin","observations","find","o","elementId","value","properties","snow_depth","precipitation_type","wind_speed","sourceId","referenceTime"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/utils/transform.js"],"sourcesContent":["// src/utils/transform.js\n\nexport function frostToGeoJSON(frostData) {\n  if (!frostData || !Array.isArray(frostData.data)) {\n    console.warn(\"⚠️ frostToGeoJSON: No valid data found\");\n    return { type: \"FeatureCollection\", features: [] };\n  }\n\n  return {\n    type: \"FeatureCollection\",\n    features: frostData.data\n      // ✅ Only include valid geometry points\n      .filter(\n        obs =>\n          obs.geometry &&\n          obs.geometry.type === \"Point\" &&\n          Array.isArray(obs.geometry.coordinates) &&\n          obs.geometry.coordinates.length === 2\n      )\n      .map(obs => {\n        const getValue = id =>\n          obs.observations?.find(o => o.elementId === id)?.value;\n\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: obs.geometry.coordinates,\n          },\n          properties: {\n            snow_depth: getValue(\"snow_depth\") ?? 0,\n            precipitation_type: getValue(\"precipitation_type\") ?? \"none\",\n            wind_speed: getValue(\"wind_speed\") ?? 0,\n            sourceId: obs.sourceId ?? \"Unknown\",\n            referenceTime: obs.referenceTime ?? \"Unknown\",\n          },\n        };\n      }),\n  };\n}\n"],"mappings":"AAAA;;AAEA,OAAO,SAASA,cAAcA,CAACC,SAAS,EAAE;EACxC,IAAI,CAACA,SAAS,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,SAAS,CAACG,IAAI,CAAC,EAAE;IAChDC,OAAO,CAACC,IAAI,CAAC,wCAAwC,CAAC;IACtD,OAAO;MAAEC,IAAI,EAAE,mBAAmB;MAAEC,QAAQ,EAAE;IAAG,CAAC;EACpD;EAEA,OAAO;IACLD,IAAI,EAAE,mBAAmB;IACzBC,QAAQ,EAAEP,SAAS,CAACG;IAClB;IAAA,CACCK,MAAM,CACLC,GAAG,IACDA,GAAG,CAACC,QAAQ,IACZD,GAAG,CAACC,QAAQ,CAACJ,IAAI,KAAK,OAAO,IAC7BL,KAAK,CAACC,OAAO,CAACO,GAAG,CAACC,QAAQ,CAACC,WAAW,CAAC,IACvCF,GAAG,CAACC,QAAQ,CAACC,WAAW,CAACC,MAAM,KAAK,CACxC,CAAC,CACAC,GAAG,CAACJ,GAAG,IAAI;MAAA,IAAAK,SAAA,EAAAC,UAAA,EAAAC,UAAA,EAAAC,aAAA,EAAAC,kBAAA;MACV,MAAMC,QAAQ,GAAGC,EAAE;QAAA,IAAAC,iBAAA,EAAAC,qBAAA;QAAA,QAAAD,iBAAA,GACjBZ,GAAG,CAACc,YAAY,cAAAF,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAkBG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACC,SAAS,KAAKN,EAAE,CAAC,cAAAE,qBAAA,uBAA/CA,qBAAA,CAAiDK,KAAK;MAAA;MAExD,OAAO;QACLrB,IAAI,EAAE,SAAS;QACfI,QAAQ,EAAE;UACRJ,IAAI,EAAE,OAAO;UACbK,WAAW,EAAEF,GAAG,CAACC,QAAQ,CAACC;QAC5B,CAAC;QACDiB,UAAU,EAAE;UACVC,UAAU,GAAAf,SAAA,GAAEK,QAAQ,CAAC,YAAY,CAAC,cAAAL,SAAA,cAAAA,SAAA,GAAI,CAAC;UACvCgB,kBAAkB,GAAAf,UAAA,GAAEI,QAAQ,CAAC,oBAAoB,CAAC,cAAAJ,UAAA,cAAAA,UAAA,GAAI,MAAM;UAC5DgB,UAAU,GAAAf,UAAA,GAAEG,QAAQ,CAAC,YAAY,CAAC,cAAAH,UAAA,cAAAA,UAAA,GAAI,CAAC;UACvCgB,QAAQ,GAAAf,aAAA,GAAER,GAAG,CAACuB,QAAQ,cAAAf,aAAA,cAAAA,aAAA,GAAI,SAAS;UACnCgB,aAAa,GAAAf,kBAAA,GAAET,GAAG,CAACwB,aAAa,cAAAf,kBAAA,cAAAA,kBAAA,GAAI;QACtC;MACF,CAAC;IACH,CAAC;EACL,CAAC;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}