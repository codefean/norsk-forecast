{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\n// src/components/WeatherStationsMap.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { fetchStations } from \"./pages/frostAPI\";\nimport { frostToGeoJSON } from \"./pages/geojsonUtils\";\nimport { useGlacierLayer } from \"./pages/glaciers\";\nimport Loc from \"./pages/loc\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  const [cursorInfo, setCursorInfo] = useState({\n    lat: null,\n    lng: null,\n    elevM: null\n  });\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n      console.log(\"🗺️ Initializing Mapbox map...\");\n\n      // Initialize the map\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/satellite-streets-v12',\n        center: [10.75, 59.91],\n        // Oslo-ish\n        zoom: 3.8\n      });\n\n      // Wait for map to fully load\n      await new Promise(resolve => mapRef.current.on(\"load\", resolve));\n      console.log(\"🛰️ Mapbox map fully loaded\");\n\n      // Fetch Frost API station data\n      const stations = await fetchStations();\n      console.log(`📊 Total stations fetched: ${stations.length}`);\n      if (stations.length === 0) {\n        console.warn(\"⚠️ No stations returned from Frost API\");\n        return;\n      }\n\n      // ✅ Filter by country\n      const allowedCountries = [\"Sverige\",\n      // Sweden\n      \"Norge\",\n      // Norway\n      \"Svalbard og Jan Mayen\" // Svalbard\n      ];\n      const filteredStations = stations.filter(station => {\n        var _station$country;\n        const country = (_station$country = station.country) === null || _station$country === void 0 ? void 0 : _station$country.trim();\n        return allowedCountries.includes(country);\n      });\n      console.log(`📌 Showing ${filteredStations.length} stations after filtering`);\n\n      // Convert Frost stations to GeoJSON\n      const geojson = frostToGeoJSON(filteredStations);\n\n      // ✅ Use Blob URL to avoid Mapbox rejecting large inline GeoJSON\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Add GeoJSON source if not present\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url\n        });\n        console.log(\"📡 GeoJSON source added successfully\");\n      }\n\n      // Add stations layer if not present\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 3, 5, 5, 10, 8, 15, 14],\n            \"circle-color\": \"#0062ff\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9\n          }\n        });\n        console.log(\"✅ Station layer added successfully\");\n      }\n\n      // Fit map to Nordic region\n      mapRef.current.fitBounds([[-56, 57],\n      // SW corner (Greenland)\n      [32, 84] // NE corner (Svalbard)\n      ], {\n        padding: 30\n      });\n\n      // Update cursor location on mouse move\n      mapRef.current.on(\"mousemove\", e => {\n        const {\n          lng,\n          lat\n        } = e.lngLat;\n        setCursorInfo({\n          lat,\n          lng,\n          elevM: null\n        });\n      });\n\n      // Reset cursor info on mouse leave\n      mapRef.current.on(\"mouseleave\", () => {\n        setCursorInfo({\n          lat: null,\n          lng: null,\n          elevM: null\n        });\n      });\n\n      // Popup on station click\n      mapRef.current.on(\"click\", \"stations-layer\", e => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n        new mapboxgl.Popup().setLngLat(coords).setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id || \"N/A\"}<br/>\n            Land: ${props.country || \"Ukjent\"}\n          `).addTo(mapRef.current);\n      });\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"crosshair\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"crosshair\";\n      });\n\n      // Handle Mapbox rendering errors\n      mapRef.current.on(\"error\", e => {\n        console.error(\"🛑 Mapbox rendering error:\", e.error);\n      });\n    };\n    initMap();\n\n    // ✅ Cleanup on component unmount\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  // Add glacier layer hook\n  useGlacierLayer({\n    mapRef\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapContainer,\n      className: \"map-container\",\n      style: {\n        width: \"100%\",\n        height: \"100vh\",\n        borderRadius: \"10px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 1\n    }, this), /*#__PURE__*/_jsxDEV(Loc, {\n      cursorInfo: cursorInfo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 173,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"5Mnu5ol4eLSgthYhHwI62yU0Iv4=\", false, function () {\n  return [useGlacierLayer];\n});\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mapboxgl","fetchStations","frostToGeoJSON","useGlacierLayer","Loc","jsxDEV","_jsxDEV","accessToken","WeatherStationsMap","_s","mapContainer","mapRef","cursorInfo","setCursorInfo","lat","lng","elevM","initMap","current","console","log","Map","container","style","center","zoom","Promise","resolve","on","stations","length","warn","allowedCountries","filteredStations","filter","station","_station$country","country","trim","includes","geojson","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","getSource","addSource","data","getLayer","addLayer","id","source","paint","fitBounds","padding","e","lngLat","props","features","properties","coords","geometry","coordinates","Popup","setLngLat","setHTML","name","addTo","getCanvas","cursor","error","remove","position","children","ref","className","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["// src/components/WeatherStationsMap.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { fetchStations } from \"./pages/frostAPI\";\nimport { frostToGeoJSON } from \"./pages/geojsonUtils\";\nimport { useGlacierLayer } from \"./pages/glaciers\";\nimport Loc from \"./pages/loc\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  const [cursorInfo, setCursorInfo] = useState({\n    lat: null,\n    lng: null,\n    elevM: null,\n  });\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n\n      console.log(\"🗺️ Initializing Mapbox map...\");\n\n      // Initialize the map\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: 'mapbox://styles/mapbox/satellite-streets-v12',\n        center: [10.75, 59.91], // Oslo-ish\n        zoom: 3.8,\n      });\n\n      // Wait for map to fully load\n      await new Promise((resolve) => mapRef.current.on(\"load\", resolve));\n      console.log(\"🛰️ Mapbox map fully loaded\");\n\n      \n\n      // Fetch Frost API station data\n      const stations = await fetchStations();\n      console.log(`📊 Total stations fetched: ${stations.length}`);\n\n      if (stations.length === 0) {\n        console.warn(\"⚠️ No stations returned from Frost API\");\n        return;\n      }\n\n      // ✅ Filter by country\n      const allowedCountries = [\n        \"Sverige\",               // Sweden\n        \"Norge\",                 // Norway\n        \"Svalbard og Jan Mayen\", // Svalbard\n      ];\n\n      const filteredStations = stations.filter((station) => {\n        const country = station.country?.trim();\n        return allowedCountries.includes(country);\n      });\n\n      console.log(`📌 Showing ${filteredStations.length} stations after filtering`);\n\n      // Convert Frost stations to GeoJSON\n      const geojson = frostToGeoJSON(filteredStations);\n\n      // ✅ Use Blob URL to avoid Mapbox rejecting large inline GeoJSON\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Add GeoJSON source if not present\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url,\n        });\n        console.log(\"📡 GeoJSON source added successfully\");\n      }\n\n      // Add stations layer if not present\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"zoom\"],\n              0, 3,\n              5, 5,\n              10, 8,\n              15, 14,\n            ],\n            \"circle-color\": \"#0062ff\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9,\n          },\n        });\n        console.log(\"✅ Station layer added successfully\");\n      }\n\n      // Fit map to Nordic region\n      mapRef.current.fitBounds(\n        [\n          [-56, 57], // SW corner (Greenland)\n          [32, 84],  // NE corner (Svalbard)\n        ],\n        { padding: 30 }\n      );\n\n      // Update cursor location on mouse move\n      mapRef.current.on(\"mousemove\", (e) => {\n        const { lng, lat } = e.lngLat;\n        setCursorInfo({ lat, lng, elevM: null });\n      });\n\n      // Reset cursor info on mouse leave\n      mapRef.current.on(\"mouseleave\", () => {\n        setCursorInfo({ lat: null, lng: null, elevM: null });\n      });\n\n      // Popup on station click\n      mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n\n        new mapboxgl.Popup()\n          .setLngLat(coords)\n          .setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id || \"N/A\"}<br/>\n            Land: ${props.country || \"Ukjent\"}\n          `)\n          .addTo(mapRef.current);\n      });\n\nmapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n  mapRef.current.getCanvas().style.cursor = \"crosshair\";\n});\nmapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n  mapRef.current.getCanvas().style.cursor = \"crosshair\";\n});\n\n\n      // Handle Mapbox rendering errors\n      mapRef.current.on(\"error\", (e) => {\n        console.error(\"🛑 Mapbox rendering error:\", e.error);\n      });\n    };\n\n    initMap();\n\n    // ✅ Cleanup on component unmount\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  // Add glacier layer hook\n  useGlacierLayer({ mapRef });\n\n  return (\n    <div style={{ position: \"relative\" }}>\n<div\n  ref={mapContainer}\n  className=\"map-container\"\n  style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n/>\n\n      {/* Cursor readout */}\n      <Loc cursorInfo={cursorInfo} />\n    </div>\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,WAAW;AAChC,OAAO,8BAA8B;AACrC,SAASC,aAAa,QAAQ,kBAAkB;AAChD,SAASC,cAAc,QAAQ,sBAAsB;AACrD,SAASC,eAAe,QAAQ,kBAAkB;AAClD,OAAOC,GAAG,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE9BN,QAAQ,CAACO,WAAW,GAClB,2FAA2F;AAE7F,MAAMC,kBAAkB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAMC,YAAY,GAAGZ,MAAM,CAAC,IAAI,CAAC;EACjC,MAAMa,MAAM,GAAGb,MAAM,CAAC,IAAI,CAAC;EAE3B,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC;IAC3Ce,GAAG,EAAE,IAAI;IACTC,GAAG,EAAE,IAAI;IACTC,KAAK,EAAE;EACT,CAAC,CAAC;EAEFnB,SAAS,CAAC,MAAM;IACd,MAAMoB,OAAO,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAIN,MAAM,CAACO,OAAO,EAAE;MAEpBC,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;;MAE7C;MACAT,MAAM,CAACO,OAAO,GAAG,IAAIlB,QAAQ,CAACqB,GAAG,CAAC;QAChCC,SAAS,EAAEZ,YAAY,CAACQ,OAAO;QAC/BK,KAAK,EAAE,8CAA8C;QACrDC,MAAM,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC;QAAE;QACxBC,IAAI,EAAE;MACR,CAAC,CAAC;;MAEF;MACA,MAAM,IAAIC,OAAO,CAAEC,OAAO,IAAKhB,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,MAAM,EAAED,OAAO,CAAC,CAAC;MAClER,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;;MAI1C;MACA,MAAMS,QAAQ,GAAG,MAAM5B,aAAa,CAAC,CAAC;MACtCkB,OAAO,CAACC,GAAG,CAAC,8BAA8BS,QAAQ,CAACC,MAAM,EAAE,CAAC;MAE5D,IAAID,QAAQ,CAACC,MAAM,KAAK,CAAC,EAAE;QACzBX,OAAO,CAACY,IAAI,CAAC,wCAAwC,CAAC;QACtD;MACF;;MAEA;MACA,MAAMC,gBAAgB,GAAG,CACvB,SAAS;MAAgB;MACzB,OAAO;MAAkB;MACzB,uBAAuB,CAAE;MAAA,CAC1B;MAED,MAAMC,gBAAgB,GAAGJ,QAAQ,CAACK,MAAM,CAAEC,OAAO,IAAK;QAAA,IAAAC,gBAAA;QACpD,MAAMC,OAAO,IAAAD,gBAAA,GAAGD,OAAO,CAACE,OAAO,cAAAD,gBAAA,uBAAfA,gBAAA,CAAiBE,IAAI,CAAC,CAAC;QACvC,OAAON,gBAAgB,CAACO,QAAQ,CAACF,OAAO,CAAC;MAC3C,CAAC,CAAC;MAEFlB,OAAO,CAACC,GAAG,CAAC,cAAca,gBAAgB,CAACH,MAAM,2BAA2B,CAAC;;MAE7E;MACA,MAAMU,OAAO,GAAGtC,cAAc,CAAC+B,gBAAgB,CAAC;;MAEhD;MACA,MAAMQ,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACC,IAAI,CAACC,SAAS,CAACJ,OAAO,CAAC,CAAC,EAAE;QAC/CK,IAAI,EAAE;MACR,CAAC,CAAC;MACF,MAAMC,GAAG,GAAGC,GAAG,CAACC,eAAe,CAACP,IAAI,CAAC;;MAErC;MACA,IAAI,CAAC9B,MAAM,CAACO,OAAO,CAAC+B,SAAS,CAAC,UAAU,CAAC,EAAE;QACzCtC,MAAM,CAACO,OAAO,CAACgC,SAAS,CAAC,UAAU,EAAE;UACnCL,IAAI,EAAE,SAAS;UACfM,IAAI,EAAEL;QACR,CAAC,CAAC;QACF3B,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACrD;;MAEA;MACA,IAAI,CAACT,MAAM,CAACO,OAAO,CAACkC,QAAQ,CAAC,gBAAgB,CAAC,EAAE;QAC9CzC,MAAM,CAACO,OAAO,CAACmC,QAAQ,CAAC;UACtBC,EAAE,EAAE,gBAAgB;UACpBT,IAAI,EAAE,QAAQ;UACdU,MAAM,EAAE,UAAU;UAClBC,KAAK,EAAE;YACL,eAAe,EAAE,CACf,aAAa,EACb,CAAC,QAAQ,CAAC,EACV,CAAC,MAAM,CAAC,EACR,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,CAAC,EACJ,EAAE,EAAE,CAAC,EACL,EAAE,EAAE,EAAE,CACP;YACD,cAAc,EAAE,SAAS;YACzB,qBAAqB,EAAE,CAAC;YACxB,qBAAqB,EAAE,MAAM;YAC7B,gBAAgB,EAAE;UACpB;QACF,CAAC,CAAC;QACFrC,OAAO,CAACC,GAAG,CAAC,oCAAoC,CAAC;MACnD;;MAEA;MACAT,MAAM,CAACO,OAAO,CAACuC,SAAS,CACtB,CACE,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC;MAAE;MACX,CAAC,EAAE,EAAE,EAAE,CAAC,CAAG;MAAA,CACZ,EACD;QAAEC,OAAO,EAAE;MAAG,CAChB,CAAC;;MAED;MACA/C,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,WAAW,EAAG+B,CAAC,IAAK;QACpC,MAAM;UAAE5C,GAAG;UAAED;QAAI,CAAC,GAAG6C,CAAC,CAACC,MAAM;QAC7B/C,aAAa,CAAC;UAAEC,GAAG;UAAEC,GAAG;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;MAC1C,CAAC,CAAC;;MAEF;MACAL,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,YAAY,EAAE,MAAM;QACpCf,aAAa,CAAC;UAAEC,GAAG,EAAE,IAAI;UAAEC,GAAG,EAAE,IAAI;UAAEC,KAAK,EAAE;QAAK,CAAC,CAAC;MACtD,CAAC,CAAC;;MAEF;MACAL,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,OAAO,EAAE,gBAAgB,EAAG+B,CAAC,IAAK;QAClD,MAAME,KAAK,GAAGF,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACC,UAAU;QACtC,MAAMC,MAAM,GAAGL,CAAC,CAACG,QAAQ,CAAC,CAAC,CAAC,CAACG,QAAQ,CAACC,WAAW;QAEjD,IAAIlE,QAAQ,CAACmE,KAAK,CAAC,CAAC,CACjBC,SAAS,CAACJ,MAAM,CAAC,CACjBK,OAAO,CAAC;AACnB,sBAAsBR,KAAK,CAACS,IAAI;AAChC,kBAAkBT,KAAK,CAACP,EAAE,IAAI,KAAK;AACnC,oBAAoBO,KAAK,CAACxB,OAAO,IAAI,QAAQ;AAC7C,WAAW,CAAC,CACDkC,KAAK,CAAC5D,MAAM,CAACO,OAAO,CAAC;MAC1B,CAAC,CAAC;MAERP,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,MAAM;QACtDjB,MAAM,CAACO,OAAO,CAACsD,SAAS,CAAC,CAAC,CAACjD,KAAK,CAACkD,MAAM,GAAG,WAAW;MACvD,CAAC,CAAC;MACF9D,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,MAAM;QACtDjB,MAAM,CAACO,OAAO,CAACsD,SAAS,CAAC,CAAC,CAACjD,KAAK,CAACkD,MAAM,GAAG,WAAW;MACvD,CAAC,CAAC;;MAGI;MACA9D,MAAM,CAACO,OAAO,CAACU,EAAE,CAAC,OAAO,EAAG+B,CAAC,IAAK;QAChCxC,OAAO,CAACuD,KAAK,CAAC,4BAA4B,EAAEf,CAAC,CAACe,KAAK,CAAC;MACtD,CAAC,CAAC;IACJ,CAAC;IAEDzD,OAAO,CAAC,CAAC;;IAET;IACA,OAAO,MAAM;MACX,IAAIN,MAAM,CAACO,OAAO,EAAE;QAClBP,MAAM,CAACO,OAAO,CAACyD,MAAM,CAAC,CAAC;QACvBhE,MAAM,CAACO,OAAO,GAAG,IAAI;MACvB;IACF,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAf,eAAe,CAAC;IAAEQ;EAAO,CAAC,CAAC;EAE3B,oBACEL,OAAA;IAAKiB,KAAK,EAAE;MAAEqD,QAAQ,EAAE;IAAW,CAAE;IAAAC,QAAA,gBACzCvE,OAAA;MACEwE,GAAG,EAAEpE,YAAa;MAClBqE,SAAS,EAAC,eAAe;MACzBxD,KAAK,EAAE;QAAEyD,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE,OAAO;QAAEC,YAAY,EAAE;MAAO;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACjE,CAAC,eAGIhF,OAAA,CAACF,GAAG;MAACQ,UAAU,EAAEA;IAAW;MAAAuE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5B,CAAC;AAEV,CAAC;AAAC7E,EAAA,CA3KID,kBAAkB;EAAA,QA6JtBL,eAAe;AAAA;AAAAoF,EAAA,GA7JX/E,kBAAkB;AA6KxB,eAAeA,kBAAkB;AAAC,IAAA+E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}