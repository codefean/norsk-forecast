{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\n// src/components/WeatherStationsMap.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { fetchStations } from \"./pages/frostAPI\";\nimport { frostToGeoJSON } from \"./pages/geojsonUtils\";\nimport { useGlacierLayer } from \"./pages/glaciers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst [showGlaciers] = useState(false);\nconst [glacierData, setGlacierData] = useState([]);\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n      console.log(\"🗺️ Initializing Mapbox map...\");\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        // Oslo-ish\n        zoom: 3.8\n      });\n      await new Promise(resolve => mapRef.current.on(\"load\", resolve));\n      console.log(\"🛰️ Mapbox map fully loaded\");\n\n      // Fetch Frost API station data\n      const stations = await fetchStations();\n      console.log(`📊 Total stations fetched: ${stations.length}`);\n      if (stations.length === 0) {\n        console.warn(\"⚠️ No stations returned from Frost API\");\n        return;\n      }\n\n      // ✅ Use Norwegian/Swedish country names from the API\n      const allowedCountries = [\"Sverige\",\n      // Sweden\n      \"Norge\",\n      // Norway\n      \"Finland\",\n      // Finland\n      \"Island\",\n      // Iceland\n      \"Grønland\",\n      // Greenland\n      \"Svalbard og Jan Mayen\",\n      // Svalbard\n      \"Færøyene\" // Faroe Islands\n      ];\n\n      // ✅ Filter stations based on matching country names\n      const filteredStations = stations.filter(station => {\n        var _station$country;\n        const country = (_station$country = station.country) === null || _station$country === void 0 ? void 0 : _station$country.trim();\n        return allowedCountries.includes(country);\n      });\n      console.log(`📌 Showing ${filteredStations.length} stations after filtering`);\n      const geojson = frostToGeoJSON(filteredStations);\n\n      // ✅ Use Blob URL to avoid Mapbox rejecting large inline GeoJSON\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url\n        });\n        console.log(\"📡 GeoJSON source added successfully\");\n      }\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 3, 5, 5, 10, 8, 15, 14],\n            \"circle-color\": \"#0062ff\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.6\n          }\n        });\n        console.log(\"✅ Station layer added successfully\");\n      }\n\n      // Fit map to Nordic region\n      mapRef.current.fitBounds([[-56, 57],\n      // SW corner (Greenland)\n      [32, 84] // NE corner (Svalbard)\n      ], {\n        padding: 30\n      });\n\n      // Popup on station click\n      mapRef.current.on(\"click\", \"stations-layer\", e => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n        new mapboxgl.Popup().setLngLat(coords).setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id || \"N/A\"}<br/>\n            Land: ${props.country || \"Ukjent\"}\n          `).addTo(mapRef.current);\n      });\n\n      // Change cursor on hover\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"pointer\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"\";\n      });\n\n      // Handle Mapbox rendering errors explicitly\n      mapRef.current.on(\"error\", e => {\n        console.error(\"🛑 Mapbox rendering error:\", e.error);\n      });\n    };\n    initMap();\n  }, []);\n  useGlacierLayer({\n    mapRef,\n    showGlaciers,\n    glacierData,\n    activePopupRef,\n    isPopupLockedRef: isPopupLocked\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"7STN70D8983LiQPd/AWMIe+Bd4U=\", false, function () {\n  return [useGlacierLayer];\n});\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mapboxgl","fetchStations","frostToGeoJSON","useGlacierLayer","jsxDEV","_jsxDEV","accessToken","showGlaciers","glacierData","setGlacierData","WeatherStationsMap","_s","mapContainer","mapRef","initMap","current","console","log","Map","container","style","center","zoom","Promise","resolve","on","stations","length","warn","allowedCountries","filteredStations","filter","station","_station$country","country","trim","includes","geojson","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","getSource","addSource","data","getLayer","addLayer","id","source","paint","fitBounds","padding","e","props","features","properties","coords","geometry","coordinates","Popup","setLngLat","setHTML","name","addTo","getCanvas","cursor","error","activePopupRef","isPopupLockedRef","isPopupLocked","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["// src/components/WeatherStationsMap.jsx\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { fetchStations } from \"./pages/frostAPI\";\nimport { frostToGeoJSON } from \"./pages/geojsonUtils\";\nimport { useGlacierLayer } from \"./pages/glaciers\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst [showGlaciers] = useState(false);\nconst [glacierData, setGlacierData] = useState([]);\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n\n      console.log(\"🗺️ Initializing Mapbox map...\");\n\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91], // Oslo-ish\n        zoom: 3.8,\n      });\n\n      await new Promise((resolve) => mapRef.current.on(\"load\", resolve));\n      console.log(\"🛰️ Mapbox map fully loaded\");\n\n      // Fetch Frost API station data\n      const stations = await fetchStations();\n      console.log(`📊 Total stations fetched: ${stations.length}`);\n\n      if (stations.length === 0) {\n        console.warn(\"⚠️ No stations returned from Frost API\");\n        return;\n      }\n\n      // ✅ Use Norwegian/Swedish country names from the API\n      const allowedCountries = [\n        \"Sverige\",                // Sweden\n        \"Norge\",                  // Norway\n        \"Finland\",                // Finland\n        \"Island\",                 // Iceland\n        \"Grønland\",               // Greenland\n        \"Svalbard og Jan Mayen\",  // Svalbard\n        \"Færøyene\",               // Faroe Islands\n      ];\n\n      // ✅ Filter stations based on matching country names\n      const filteredStations = stations.filter((station) => {\n        const country = station.country?.trim();\n        return allowedCountries.includes(country);\n      });\n\n      console.log(`📌 Showing ${filteredStations.length} stations after filtering`);\n\n      const geojson = frostToGeoJSON(filteredStations);\n\n      // ✅ Use Blob URL to avoid Mapbox rejecting large inline GeoJSON\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url,\n        });\n        console.log(\"📡 GeoJSON source added successfully\");\n      }\n\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"zoom\"],\n              0, 3,\n              5, 5,\n              10, 8,\n              15, 14,\n            ],\n            \"circle-color\": \"#0062ff\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.6,\n          },\n        });\n        console.log(\"✅ Station layer added successfully\");\n      }\n\n      // Fit map to Nordic region\n      mapRef.current.fitBounds(\n        [\n          [-56, 57], // SW corner (Greenland)\n          [32, 84],  // NE corner (Svalbard)\n        ],\n        { padding: 30 }\n      );\n\n      // Popup on station click\n      mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n\n        new mapboxgl.Popup()\n          .setLngLat(coords)\n          .setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id || \"N/A\"}<br/>\n            Land: ${props.country || \"Ukjent\"}\n          `)\n          .addTo(mapRef.current);\n      });\n\n      // Change cursor on hover\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"pointer\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"\";\n      });\n\n      // Handle Mapbox rendering errors explicitly\n      mapRef.current.on(\"error\", (e) => {\n        console.error(\"🛑 Mapbox rendering error:\", e.error);\n      });\n    };\n\n    initMap();\n  }, []);\n\n  useGlacierLayer({\n  mapRef,\n  showGlaciers,\n  glacierData,        \n  activePopupRef,\n  isPopupLockedRef: isPopupLocked,\n});\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n    \n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}