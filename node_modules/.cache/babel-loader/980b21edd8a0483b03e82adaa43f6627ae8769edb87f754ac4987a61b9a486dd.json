{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/components/MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Layers from \"./Layers\";\nimport SnowOverlay from \"./SnowOverlay\";\nimport { frostToGeoJSON } from \"../utils/transform\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nfunction MapView() {\n  _s();\n  const mapRef = useRef(null);\n  const mapObj = useRef(null);\n  const [geojson, setGeojson] = useState(null);\n\n  // Fetch Frost API data and convert to GeoJSON\n  const fetchFrostData = async () => {\n    try {\n      const url = \"https://frost.met.no/observations/v0.json?sources=SN18700&elements=snow_depth,wind_speed,precipitation_type\";\n      const response = await fetch(url, {\n        headers: {\n          Authorization: \"Basic \" + btoa(`${process.env.REACT_APP_FROST_CLIENT_ID}:`)\n        }\n      });\n      if (!response.ok) {\n        throw new Error(`Frost API error: ${response.status}`);\n      }\n      const frostData = await response.json();\n      const geo = frostToGeoJSON(frostData);\n      setGeojson(geo);\n    } catch (error) {\n      console.error(\"Error fetching Frost data:\", error);\n    }\n  };\n\n  // Initialize Mapbox map\n  useEffect(() => {\n    mapObj.current = new mapboxgl.Map({\n      container: mapRef.current,\n      style: \"mapbox://styles/mapbox/outdoors-v12\",\n      center: [10, 64.5],\n      zoom: 4.2,\n      pitch: 20,\n      antialias: true\n    });\n    mapObj.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n    mapObj.current.on(\"load\", () => {\n      // Add DEM source for 3D terrain\n      mapObj.current.addSource(\"mapbox-dem\", {\n        type: \"raster-dem\",\n        url: \"mapbox://mapbox.terrain-rgb\",\n        tileSize: 512,\n        maxzoom: 14\n      });\n      mapObj.current.setTerrain({\n        source: \"mapbox-dem\",\n        exaggeration: 1.5\n      });\n\n      // Fetch Frost data once the map is ready\n      fetchFrostData();\n    });\n    return () => mapObj.current.remove();\n  }, []);\n\n  // Update GeoJSON source whenever data changes\n  useEffect(() => {\n    if (geojson && mapObj.current) {\n      if (mapObj.current.getSource(\"frost-live\")) {\n        mapObj.current.getSource(\"frost-live\").setData(geojson);\n      } else {\n        mapObj.current.addSource(\"frost-live\", {\n          type: \"geojson\",\n          data: geojson\n        });\n        Layers(mapObj.current);\n      }\n    }\n  }, [geojson]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      position: \"relative\",\n      width: \"100%\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: mapRef,\n      style: {\n        width: \"100%\",\n        height: \"100%\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), mapObj.current && /*#__PURE__*/_jsxDEV(SnowOverlay, {\n      geojson: geojson,\n      map: mapObj.current\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 26\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(MapView, \"YD9cl47s/zmwh5950Q5phXww6eI=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mapboxgl","Layers","SnowOverlay","frostToGeoJSON","jsxDEV","_jsxDEV","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","MapView","_s","mapRef","mapObj","geojson","setGeojson","fetchFrostData","url","response","fetch","headers","Authorization","btoa","REACT_APP_FROST_CLIENT_ID","ok","Error","status","frostData","json","geo","error","console","current","Map","container","style","center","zoom","pitch","antialias","addControl","NavigationControl","on","addSource","type","tileSize","maxzoom","setTerrain","source","exaggeration","remove","getSource","setData","data","position","width","height","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","map","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport Layers from \"./Layers\";\nimport SnowOverlay from \"./SnowOverlay\";\nimport { frostToGeoJSON } from \"../utils/transform\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\n\nfunction MapView() {\n  const mapRef = useRef(null);\n  const mapObj = useRef(null);\n  const [geojson, setGeojson] = useState(null);\n\n  // Fetch Frost API data and convert to GeoJSON\n  const fetchFrostData = async () => {\n    try {\n      const url =\n        \"https://frost.met.no/observations/v0.json?sources=SN18700&elements=snow_depth,wind_speed,precipitation_type\";\n      \n      const response = await fetch(url, {\n        headers: {\n          Authorization: \"Basic \" + btoa(`${process.env.REACT_APP_FROST_CLIENT_ID}:`),\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(`Frost API error: ${response.status}`);\n      }\n\n      const frostData = await response.json();\n      const geo = frostToGeoJSON(frostData);\n      setGeojson(geo);\n    } catch (error) {\n      console.error(\"Error fetching Frost data:\", error);\n    }\n  };\n\n  // Initialize Mapbox map\n  useEffect(() => {\n    mapObj.current = new mapboxgl.Map({\n      container: mapRef.current,\n      style: \"mapbox://styles/mapbox/outdoors-v12\",\n      center: [10, 64.5],\n      zoom: 4.2,\n      pitch: 20,\n      antialias: true,\n    });\n\n    mapObj.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n\n    mapObj.current.on(\"load\", () => {\n      // Add DEM source for 3D terrain\n      mapObj.current.addSource(\"mapbox-dem\", {\n        type: \"raster-dem\",\n        url: \"mapbox://mapbox.terrain-rgb\",\n        tileSize: 512,\n        maxzoom: 14,\n      });\n\n      mapObj.current.setTerrain({ source: \"mapbox-dem\", exaggeration: 1.5 });\n\n      // Fetch Frost data once the map is ready\n      fetchFrostData();\n    });\n\n    return () => mapObj.current.remove();\n  }, []);\n\n  // Update GeoJSON source whenever data changes\n  useEffect(() => {\n    if (geojson && mapObj.current) {\n      if (mapObj.current.getSource(\"frost-live\")) {\n        mapObj.current.getSource(\"frost-live\").setData(geojson);\n      } else {\n        mapObj.current.addSource(\"frost-live\", { type: \"geojson\", data: geojson });\n        Layers(mapObj.current);\n      }\n    }\n  }, [geojson]);\n\n  return (\n    <div style={{ position: \"relative\", width: \"100%\", height: \"100vh\" }}>\n      <div ref={mapRef} style={{ width: \"100%\", height: \"100%\" }} />\n      {mapObj.current && <SnowOverlay geojson={geojson} map={mapObj.current} />}\n    </div>\n  );\n}\n\nexport default MapView;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}