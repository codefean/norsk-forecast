{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/components/MapView.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport { fetchStations } from \"../api/frostApi\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\nfunction MapView() {\n  _s();\n  const mapRef = useRef(null);\n  const mapObj = useRef(null);\n  const [geojson, setGeojson] = useState(null);\n\n  // Fetch and transform stations into GeoJSON\n  useEffect(() => {\n    async function loadStations() {\n      try {\n        const stations = await fetchStations();\n        const geo = {\n          type: \"FeatureCollection\",\n          features: stations.data.filter(s => {\n            var _s$geometry;\n            return (_s$geometry = s.geometry) === null || _s$geometry === void 0 ? void 0 : _s$geometry.coordinates;\n          }).map(station => ({\n            type: \"Feature\",\n            geometry: station.geometry,\n            properties: {\n              id: station.id,\n              name: station.name\n            }\n          }))\n        };\n        console.log(\"Stations GeoJSON:\", geo);\n        setGeojson(geo);\n      } catch (err) {\n        console.error(\"Failed to fetch stations:\", err);\n      }\n    }\n    mapObj.current = new mapboxgl.Map({\n      container: mapRef.current,\n      style: \"mapbox://styles/mapbox/outdoors-v12\",\n      center: [10, 64.5],\n      zoom: 4.2\n    });\n    mapObj.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n    mapObj.current.on(\"load\", () => {\n      loadStations();\n    });\n    return () => mapObj.current.remove();\n  }, []);\n\n  // Add/update stations layer\n  useEffect(() => {\n    if (geojson && mapObj.current) {\n      if (mapObj.current.getSource(\"stations\")) {\n        mapObj.current.getSource(\"stations\").setData(geojson);\n      } else {\n        mapObj.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson\n        });\n        mapObj.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": 4,\n            \"circle-color\": \"#007cbf\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\"\n          }\n        });\n      }\n    }\n  }, [geojson]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapRef,\n    style: {\n      width: \"100%\",\n      height: \"100vh\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 10\n  }, this);\n}\n_s(MapView, \"YD9cl47s/zmwh5950Q5phXww6eI=\");\n_c = MapView;\nexport default MapView;\nvar _c;\n$RefreshReg$(_c, \"MapView\");","map":{"version":3,"names":["React","useEffect","useRef","useState","mapboxgl","fetchStations","jsxDEV","_jsxDEV","accessToken","process","env","REACT_APP_MAPBOX_TOKEN","MapView","_s","mapRef","mapObj","geojson","setGeojson","loadStations","stations","geo","type","features","data","filter","s","_s$geometry","geometry","coordinates","map","station","properties","id","name","console","log","err","error","current","Map","container","style","center","zoom","addControl","NavigationControl","on","remove","getSource","setData","addSource","addLayer","source","paint","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/components/MapView.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport { fetchStations } from \"../api/frostApi\";\n\nmapboxgl.accessToken = process.env.REACT_APP_MAPBOX_TOKEN;\n\nfunction MapView() {\n  const mapRef = useRef(null);\n  const mapObj = useRef(null);\n  const [geojson, setGeojson] = useState(null);\n\n  // Fetch and transform stations into GeoJSON\n  useEffect(() => {\n    async function loadStations() {\n      try {\n        const stations = await fetchStations();\n\n        const geo = {\n          type: \"FeatureCollection\",\n          features: stations.data\n            .filter(s => s.geometry?.coordinates)\n            .map(station => ({\n              type: \"Feature\",\n              geometry: station.geometry,\n              properties: {\n                id: station.id,\n                name: station.name,\n              },\n            })),\n        };\n\n        console.log(\"Stations GeoJSON:\", geo);\n        setGeojson(geo);\n      } catch (err) {\n        console.error(\"Failed to fetch stations:\", err);\n      }\n    }\n\n    mapObj.current = new mapboxgl.Map({\n      container: mapRef.current,\n      style: \"mapbox://styles/mapbox/outdoors-v12\",\n      center: [10, 64.5],\n      zoom: 4.2,\n    });\n\n    mapObj.current.addControl(new mapboxgl.NavigationControl(), \"top-right\");\n\n    mapObj.current.on(\"load\", () => {\n      loadStations();\n    });\n\n    return () => mapObj.current.remove();\n  }, []);\n\n  // Add/update stations layer\n  useEffect(() => {\n    if (geojson && mapObj.current) {\n      if (mapObj.current.getSource(\"stations\")) {\n        mapObj.current.getSource(\"stations\").setData(geojson);\n      } else {\n        mapObj.current.addSource(\"stations\", { type: \"geojson\", data: geojson });\n\n        mapObj.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": 4,\n            \"circle-color\": \"#007cbf\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n          },\n        });\n      }\n    }\n  }, [geojson]);\n\n  return <div ref={mapRef} style={{ width: \"100%\", height: \"100vh\" }} />;\n}\n\nexport default MapView;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ,OAAO;AAC1D,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,aAAa,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhDH,QAAQ,CAACI,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,sBAAsB;AAEzD,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EACjB,MAAMC,MAAM,GAAGZ,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAMa,MAAM,GAAGb,MAAM,CAAC,IAAI,CAAC;EAC3B,MAAM,CAACc,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC;;EAE5C;EACAF,SAAS,CAAC,MAAM;IACd,eAAeiB,YAAYA,CAAA,EAAG;MAC5B,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMd,aAAa,CAAC,CAAC;QAEtC,MAAMe,GAAG,GAAG;UACVC,IAAI,EAAE,mBAAmB;UACzBC,QAAQ,EAAEH,QAAQ,CAACI,IAAI,CACpBC,MAAM,CAACC,CAAC;YAAA,IAAAC,WAAA;YAAA,QAAAA,WAAA,GAAID,CAAC,CAACE,QAAQ,cAAAD,WAAA,uBAAVA,WAAA,CAAYE,WAAW;UAAA,EAAC,CACpCC,GAAG,CAACC,OAAO,KAAK;YACfT,IAAI,EAAE,SAAS;YACfM,QAAQ,EAAEG,OAAO,CAACH,QAAQ;YAC1BI,UAAU,EAAE;cACVC,EAAE,EAAEF,OAAO,CAACE,EAAE;cACdC,IAAI,EAAEH,OAAO,CAACG;YAChB;UACF,CAAC,CAAC;QACN,CAAC;QAEDC,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEf,GAAG,CAAC;QACrCH,UAAU,CAACG,GAAG,CAAC;MACjB,CAAC,CAAC,OAAOgB,GAAG,EAAE;QACZF,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAED,GAAG,CAAC;MACjD;IACF;IAEArB,MAAM,CAACuB,OAAO,GAAG,IAAIlC,QAAQ,CAACmC,GAAG,CAAC;MAChCC,SAAS,EAAE1B,MAAM,CAACwB,OAAO;MACzBG,KAAK,EAAE,qCAAqC;MAC5CC,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,CAAC;MAClBC,IAAI,EAAE;IACR,CAAC,CAAC;IAEF5B,MAAM,CAACuB,OAAO,CAACM,UAAU,CAAC,IAAIxC,QAAQ,CAACyC,iBAAiB,CAAC,CAAC,EAAE,WAAW,CAAC;IAExE9B,MAAM,CAACuB,OAAO,CAACQ,EAAE,CAAC,MAAM,EAAE,MAAM;MAC9B5B,YAAY,CAAC,CAAC;IAChB,CAAC,CAAC;IAEF,OAAO,MAAMH,MAAM,CAACuB,OAAO,CAACS,MAAM,CAAC,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA9C,SAAS,CAAC,MAAM;IACd,IAAIe,OAAO,IAAID,MAAM,CAACuB,OAAO,EAAE;MAC7B,IAAIvB,MAAM,CAACuB,OAAO,CAACU,SAAS,CAAC,UAAU,CAAC,EAAE;QACxCjC,MAAM,CAACuB,OAAO,CAACU,SAAS,CAAC,UAAU,CAAC,CAACC,OAAO,CAACjC,OAAO,CAAC;MACvD,CAAC,MAAM;QACLD,MAAM,CAACuB,OAAO,CAACY,SAAS,CAAC,UAAU,EAAE;UAAE7B,IAAI,EAAE,SAAS;UAAEE,IAAI,EAAEP;QAAQ,CAAC,CAAC;QAExED,MAAM,CAACuB,OAAO,CAACa,QAAQ,CAAC;UACtBnB,EAAE,EAAE,gBAAgB;UACpBX,IAAI,EAAE,QAAQ;UACd+B,MAAM,EAAE,UAAU;UAClBC,KAAK,EAAE;YACL,eAAe,EAAE,CAAC;YAClB,cAAc,EAAE,SAAS;YACzB,qBAAqB,EAAE,CAAC;YACxB,qBAAqB,EAAE;UACzB;QACF,CAAC,CAAC;MACJ;IACF;EACF,CAAC,EAAE,CAACrC,OAAO,CAAC,CAAC;EAEb,oBAAOT,OAAA;IAAK+C,GAAG,EAAExC,MAAO;IAAC2B,KAAK,EAAE;MAAEc,KAAK,EAAE,MAAM;MAAEC,MAAM,EAAE;IAAQ;EAAE;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACxE;AAAC/C,EAAA,CAxEQD,OAAO;AAAAiD,EAAA,GAAPjD,OAAO;AA0EhB,eAAeA,OAAO;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}