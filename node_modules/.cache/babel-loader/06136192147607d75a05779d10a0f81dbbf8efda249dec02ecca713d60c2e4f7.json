{"ast":null,"code":"/**\n * Convert Frost API station data into valid GeoJSON\n * Filters invalid stations and logs a summary instead of spamming warnings.\n */\nexport const frostToGeoJSON = stations => {\n  let skippedCount = 0;\n  const features = stations.filter(station => {\n    var _station$geometry;\n    const coords = (_station$geometry = station.geometry) === null || _station$geometry === void 0 ? void 0 : _station$geometry.coordinates;\n    const valid = coords && Array.isArray(coords) && coords.length === 2 && typeof coords[0] === \"number\" && typeof coords[1] === \"number\";\n    if (!valid) {\n      skippedCount++;\n    }\n    return valid;\n  }).map(station => ({\n    type: \"Feature\",\n    geometry: {\n      type: \"Point\",\n      coordinates: station.geometry.coordinates\n    },\n    properties: {\n      id: station.id,\n      name: station.name || \"Unnamed Station\",\n      shortName: station.shortName || \"Unknown\",\n      country: station.country || \"Norway\"\n    }\n  }));\n  console.log(`✅ Converted ${features.length} valid stations into GeoJSON. ` + (skippedCount > 0 ? `(${skippedCount} skipped)` : \"\"));\n  return {\n    type: \"FeatureCollection\",\n    features\n  };\n};","map":{"version":3,"names":["frostToGeoJSON","stations","skippedCount","features","filter","station","_station$geometry","coords","geometry","coordinates","valid","Array","isArray","length","map","type","properties","id","name","shortName","country","console","log"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/pages/geojsonUtils.js"],"sourcesContent":["/**\n * Convert Frost API station data into valid GeoJSON\n * Filters invalid stations and logs a summary instead of spamming warnings.\n */\nexport const frostToGeoJSON = (stations) => {\n  let skippedCount = 0;\n\n  const features = stations\n    .filter((station) => {\n      const coords = station.geometry?.coordinates;\n      const valid =\n        coords &&\n        Array.isArray(coords) &&\n        coords.length === 2 &&\n        typeof coords[0] === \"number\" &&\n        typeof coords[1] === \"number\";\n\n      if (!valid) {\n        skippedCount++;\n      }\n      return valid;\n    })\n    .map((station) => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: station.geometry.coordinates,\n      },\n      properties: {\n        id: station.id,\n        name: station.name || \"Unnamed Station\",\n        shortName: station.shortName || \"Unknown\",\n        country: station.country || \"Norway\",\n      },\n    }));\n\n  console.log(\n    `✅ Converted ${features.length} valid stations into GeoJSON. ` +\n    (skippedCount > 0 ? `(${skippedCount} skipped)` : \"\")\n  );\n\n  return {\n    type: \"FeatureCollection\",\n    features,\n  };\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAIC,QAAQ,IAAK;EAC1C,IAAIC,YAAY,GAAG,CAAC;EAEpB,MAAMC,QAAQ,GAAGF,QAAQ,CACtBG,MAAM,CAAEC,OAAO,IAAK;IAAA,IAAAC,iBAAA;IACnB,MAAMC,MAAM,IAAAD,iBAAA,GAAGD,OAAO,CAACG,QAAQ,cAAAF,iBAAA,uBAAhBA,iBAAA,CAAkBG,WAAW;IAC5C,MAAMC,KAAK,GACTH,MAAM,IACNI,KAAK,CAACC,OAAO,CAACL,MAAM,CAAC,IACrBA,MAAM,CAACM,MAAM,KAAK,CAAC,IACnB,OAAON,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ,IAC7B,OAAOA,MAAM,CAAC,CAAC,CAAC,KAAK,QAAQ;IAE/B,IAAI,CAACG,KAAK,EAAE;MACVR,YAAY,EAAE;IAChB;IACA,OAAOQ,KAAK;EACd,CAAC,CAAC,CACDI,GAAG,CAAET,OAAO,KAAM;IACjBU,IAAI,EAAE,SAAS;IACfP,QAAQ,EAAE;MACRO,IAAI,EAAE,OAAO;MACbN,WAAW,EAAEJ,OAAO,CAACG,QAAQ,CAACC;IAChC,CAAC;IACDO,UAAU,EAAE;MACVC,EAAE,EAAEZ,OAAO,CAACY,EAAE;MACdC,IAAI,EAAEb,OAAO,CAACa,IAAI,IAAI,iBAAiB;MACvCC,SAAS,EAAEd,OAAO,CAACc,SAAS,IAAI,SAAS;MACzCC,OAAO,EAAEf,OAAO,CAACe,OAAO,IAAI;IAC9B;EACF,CAAC,CAAC,CAAC;EAELC,OAAO,CAACC,GAAG,CACT,eAAenB,QAAQ,CAACU,MAAM,gCAAgC,IAC7DX,YAAY,GAAG,CAAC,GAAG,IAAIA,YAAY,WAAW,GAAG,EAAE,CACtD,CAAC;EAED,OAAO;IACLa,IAAI,EAAE,mBAAmB;IACzBZ;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}