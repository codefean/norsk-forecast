{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  // --- 🧹 LINTING + CONVERSION ------------------------------------------------\n  const stationsToGeoJSON = stations => {\n    const stats = {\n      total: stations.length,\n      kept: 0,\n      nonPoint: 0,\n      badCoords: 0,\n      outOfRange: 0,\n      duplicates: 0\n    };\n    const seen = new Set(); // dedupe by rounded lng/lat\n    const features = [];\n    for (const s of stations) {\n      var _ref, _s$id, _ref2, _s$name, _s$shortName, _s$country;\n      const g = s === null || s === void 0 ? void 0 : s.geometry;\n      if (!g || g.type !== \"Point\") {\n        stats.nonPoint++;\n        continue;\n      }\n      let coords = g.coordinates;\n      if (!Array.isArray(coords) || coords.length !== 2) {\n        stats.badCoords++;\n        continue;\n      }\n      let [lng, lat] = coords.map(Number);\n      if (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n        stats.badCoords++;\n        continue;\n      }\n\n      // WGS84 world bounds\n      if (lng < -180 || lng > 180 || lat < -90 || lat > 90) {\n        stats.outOfRange++;\n        continue;\n      }\n      const key = `${lng.toFixed(6)},${lat.toFixed(6)}`;\n      if (seen.has(key)) {\n        stats.duplicates++;\n        continue;\n      }\n      seen.add(key);\n      features.push({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [lng, lat]\n        },\n        properties: {\n          id: String((_ref = (_s$id = s.id) !== null && _s$id !== void 0 ? _s$id : s.sourceId) !== null && _ref !== void 0 ? _ref : \"\"),\n          name: (_ref2 = (_s$name = s.name) !== null && _s$name !== void 0 ? _s$name : s.shortName) !== null && _ref2 !== void 0 ? _ref2 : \"Unknown\",\n          shortName: (_s$shortName = s.shortName) !== null && _s$shortName !== void 0 ? _s$shortName : \"\",\n          country: (_s$country = s.country) !== null && _s$country !== void 0 ? _s$country : \"Norway\"\n        }\n      });\n      stats.kept++;\n    }\n    console.log(`🧹 Lint summary — total: ${stats.total}, kept: ${stats.kept}, ` + `removed → nonPoint:${stats.nonPoint}, badCoords:${stats.badCoords}, ` + `outOfRange:${stats.outOfRange}, duplicates:${stats.duplicates}`);\n    return {\n      type: \"FeatureCollection\",\n      features\n    };\n  };\n\n  // --- 🌐 FETCH ---------------------------------------------------------------\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"🌍 Fetching stations from Frost API...\");\n      const res = await fetch(\"/frost/sources/v0.jsonld?types=SensorSystem\", {\n        headers: {\n          Authorization: `Basic ${frostAuth}`,\n          Accept: \"application/json\"\n        }\n      });\n      console.log(\"🔄 Response status:\", res.status);\n      if (!res.ok) throw new Error(`Frost error ${res.status}`);\n      const data = await res.json();\n      if (!data || !Array.isArray(data.data)) {\n        console.error(\"🚨 Unexpected Frost payload shape\");\n        return [];\n      }\n      return data.data;\n    } catch (e) {\n      console.error(\"🚨 Fetch error:\", e);\n      return [];\n    }\n  };\n\n  // --- 🗺️ MAP -----------------------------------------------------------------\n  useEffect(() => {\n    const init = async () => {\n      if (mapRef.current) return;\n      console.log(\"🗺️ Initializing Mapbox map...\");\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        zoom: 5\n      });\n      mapRef.current = map;\n      await new Promise(r => map.on(\"load\", r));\n      console.log(\"🛰️ Mapbox loaded\");\n      const stations = await fetchStations();\n      console.log(`📊 Raw stations fetched: ${stations.length}`);\n      const geojson = stationsToGeoJSON(stations);\n      console.log(\"🌐 GeoJSON ready:\", geojson);\n\n      // Use a Blob URL to avoid inline-JSON parsing limits\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Source with clustering enabled\n      if (!map.getSource(\"stations\")) {\n        map.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url,\n          cluster: true,\n          clusterRadius: 40,\n          // px\n          clusterMaxZoom: 12 // highest zoom to cluster points\n        });\n      }\n\n      // Cluster circles\n      if (!map.getLayer(\"clusters\")) {\n        map.addLayer({\n          id: \"clusters\",\n          type: \"circle\",\n          source: \"stations\",\n          filter: [\"has\", \"point_count\"],\n          paint: {\n            \"circle-color\": [\"step\", [\"get\", \"point_count\"], \"#ffb347\",\n            // small\n            20, \"#ff7f50\",\n            // medium\n            100, \"#ff5c5c\" // large\n            ],\n            \"circle-radius\": [\"step\", [\"get\", \"point_count\"], 14, 20, 18, 100, 24],\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\"\n          }\n        });\n      }\n\n      // Cluster count labels\n      if (!map.getLayer(\"cluster-count\")) {\n        map.addLayer({\n          id: \"cluster-count\",\n          type: \"symbol\",\n          source: \"stations\",\n          filter: [\"has\", \"point_count\"],\n          layout: {\n            \"text-field\": [\"get\", \"point_count_abbreviated\"],\n            \"text-font\": [\"DIN Pro Medium\", \"Arial Unicode MS Bold\"],\n            \"text-size\": 12\n          },\n          paint: {\n            \"text-color\": \"#222\"\n          }\n        });\n      }\n\n      // Unclustered points\n      if (!map.getLayer(\"unclustered-point\")) {\n        map.addLayer({\n          id: \"unclustered-point\",\n          type: \"circle\",\n          source: \"stations\",\n          filter: [\"!\", [\"has\", \"point_count\"]],\n          paint: {\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 3, 6, 5, 10, 7, 15, 12],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9\n          }\n        });\n      }\n      console.log(\"✅ Cluster + point layers added\");\n\n      // Smooth zoom animation into a cluster\n      map.on(\"click\", \"clusters\", e => {\n        const features = map.queryRenderedFeatures(e.point, {\n          layers: [\"clusters\"]\n        });\n        const clusterId = features[0].properties.cluster_id;\n        const coordinates = features[0].geometry.coordinates;\n        const source = map.getSource(\"stations\");\n        source.getClusterExpansionZoom(clusterId, (err, zoom) => {\n          if (err) return;\n          map.easeTo({\n            center: coordinates,\n            zoom,\n            duration: 600,\n            essential: true\n          });\n        });\n      });\n\n      // Popup for a single station\n      map.on(\"click\", \"unclustered-point\", e => {\n        var _e$features;\n        const f = (_e$features = e.features) === null || _e$features === void 0 ? void 0 : _e$features[0];\n        if (!f) return;\n        const {\n          id,\n          name,\n          country\n        } = f.properties;\n        new mapboxgl.Popup({\n          closeOnMove: true\n        }).setLngLat(f.geometry.coordinates).setHTML(`<strong>${name}</strong><br/>ID: ${id}<br/>Country: ${country}`).addTo(map);\n      });\n\n      // Pointer cursor on hover\n      const pointerLayers = [\"clusters\", \"unclustered-point\"];\n      pointerLayers.forEach(layerId => {\n        map.on(\"mouseenter\", layerId, () => {\n          map.getCanvas().style.cursor = \"pointer\";\n        });\n        map.on(\"mouseleave\", layerId, () => {\n          map.getCanvas().style.cursor = \"\";\n        });\n      });\n\n      // Fit to region (Norway-ish)\n      map.fitBounds([[4, 57], [31, 72]], {\n        padding: 20,\n        duration: 700\n      });\n\n      // Explicit render errors\n      map.on(\"error\", e => console.error(\"🛑 Mapbox error:\", e === null || e === void 0 ? void 0 : e.error));\n    };\n    init();\n\n    // Optional cleanup on unmount\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 297,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"trBYWQnBQabdsyB7ysINFei525A=\");\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","mapboxgl","jsxDEV","_jsxDEV","accessToken","FROST_CLIENT_ID","FROST_CLIENT_SECRET","WeatherStationsMap","_s","mapContainer","mapRef","stationsToGeoJSON","stations","stats","total","length","kept","nonPoint","badCoords","outOfRange","duplicates","seen","Set","features","s","_ref","_s$id","_ref2","_s$name","_s$shortName","_s$country","g","geometry","type","coords","coordinates","Array","isArray","lng","lat","map","Number","isFinite","key","toFixed","has","add","push","properties","id","String","sourceId","name","shortName","country","console","log","fetchStations","frostAuth","btoa","res","fetch","headers","Authorization","Accept","status","ok","Error","data","json","error","e","init","current","Map","container","style","center","zoom","Promise","r","on","geojson","blob","Blob","JSON","stringify","url","URL","createObjectURL","getSource","addSource","cluster","clusterRadius","clusterMaxZoom","getLayer","addLayer","source","filter","paint","layout","queryRenderedFeatures","point","layers","clusterId","cluster_id","getClusterExpansionZoom","err","easeTo","duration","essential","_e$features","f","Popup","closeOnMove","setLngLat","setHTML","addTo","pointerLayers","forEach","layerId","getCanvas","cursor","fitBounds","padding","remove","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  // --- 🧹 LINTING + CONVERSION ------------------------------------------------\n  const stationsToGeoJSON = (stations) => {\n    const stats = {\n      total: stations.length,\n      kept: 0,\n      nonPoint: 0,\n      badCoords: 0,\n      outOfRange: 0,\n      duplicates: 0,\n    };\n\n    const seen = new Set(); // dedupe by rounded lng/lat\n    const features = [];\n\n    for (const s of stations) {\n      const g = s?.geometry;\n      if (!g || g.type !== \"Point\") {\n        stats.nonPoint++;\n        continue;\n      }\n\n      let coords = g.coordinates;\n      if (!Array.isArray(coords) || coords.length !== 2) {\n        stats.badCoords++;\n        continue;\n      }\n\n      let [lng, lat] = coords.map(Number);\n      if (!Number.isFinite(lng) || !Number.isFinite(lat)) {\n        stats.badCoords++;\n        continue;\n      }\n\n      // WGS84 world bounds\n      if (lng < -180 || lng > 180 || lat < -90 || lat > 90) {\n        stats.outOfRange++;\n        continue;\n      }\n\n      const key = `${lng.toFixed(6)},${lat.toFixed(6)}`;\n      if (seen.has(key)) {\n        stats.duplicates++;\n        continue;\n      }\n      seen.add(key);\n\n      features.push({\n        type: \"Feature\",\n        geometry: { type: \"Point\", coordinates: [lng, lat] },\n        properties: {\n          id: String(s.id ?? s.sourceId ?? \"\"),\n          name: s.name ?? s.shortName ?? \"Unknown\",\n          shortName: s.shortName ?? \"\",\n          country: s.country ?? \"Norway\",\n        },\n      });\n      stats.kept++;\n    }\n\n    console.log(\n      `🧹 Lint summary — total: ${stats.total}, kept: ${stats.kept}, ` +\n        `removed → nonPoint:${stats.nonPoint}, badCoords:${stats.badCoords}, ` +\n        `outOfRange:${stats.outOfRange}, duplicates:${stats.duplicates}`\n    );\n\n    return { type: \"FeatureCollection\", features };\n  };\n\n  // --- 🌐 FETCH ---------------------------------------------------------------\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"🌍 Fetching stations from Frost API...\");\n\n      const res = await fetch(\"/frost/sources/v0.jsonld?types=SensorSystem\", {\n        headers: {\n          Authorization: `Basic ${frostAuth}`,\n          Accept: \"application/json\",\n        },\n      });\n\n      console.log(\"🔄 Response status:\", res.status);\n      if (!res.ok) throw new Error(`Frost error ${res.status}`);\n\n      const data = await res.json();\n      if (!data || !Array.isArray(data.data)) {\n        console.error(\"🚨 Unexpected Frost payload shape\");\n        return [];\n      }\n      return data.data;\n    } catch (e) {\n      console.error(\"🚨 Fetch error:\", e);\n      return [];\n    }\n  };\n\n  // --- 🗺️ MAP -----------------------------------------------------------------\n  useEffect(() => {\n    const init = async () => {\n      if (mapRef.current) return;\n\n      console.log(\"🗺️ Initializing Mapbox map...\");\n      const map = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        zoom: 5,\n      });\n      mapRef.current = map;\n\n      await new Promise((r) => map.on(\"load\", r));\n      console.log(\"🛰️ Mapbox loaded\");\n\n      const stations = await fetchStations();\n      console.log(`📊 Raw stations fetched: ${stations.length}`);\n\n      const geojson = stationsToGeoJSON(stations);\n      console.log(\"🌐 GeoJSON ready:\", geojson);\n\n      // Use a Blob URL to avoid inline-JSON parsing limits\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Source with clustering enabled\n      if (!map.getSource(\"stations\")) {\n        map.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url,\n          cluster: true,\n          clusterRadius: 40, // px\n          clusterMaxZoom: 12, // highest zoom to cluster points\n        });\n      }\n\n      // Cluster circles\n      if (!map.getLayer(\"clusters\")) {\n        map.addLayer({\n          id: \"clusters\",\n          type: \"circle\",\n          source: \"stations\",\n          filter: [\"has\", \"point_count\"],\n          paint: {\n            \"circle-color\": [\n              \"step\",\n              [\"get\", \"point_count\"],\n              \"#ffb347\", // small\n              20,\n              \"#ff7f50\", // medium\n              100,\n              \"#ff5c5c\", // large\n            ],\n            \"circle-radius\": [\n              \"step\",\n              [\"get\", \"point_count\"],\n              14,\n              20,\n              18,\n              100,\n              24,\n            ],\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n          },\n        });\n      }\n\n      // Cluster count labels\n      if (!map.getLayer(\"cluster-count\")) {\n        map.addLayer({\n          id: \"cluster-count\",\n          type: \"symbol\",\n          source: \"stations\",\n          filter: [\"has\", \"point_count\"],\n          layout: {\n            \"text-field\": [\"get\", \"point_count_abbreviated\"],\n            \"text-font\": [\"DIN Pro Medium\", \"Arial Unicode MS Bold\"],\n            \"text-size\": 12,\n          },\n          paint: {\n            \"text-color\": \"#222\",\n          },\n        });\n      }\n\n      // Unclustered points\n      if (!map.getLayer(\"unclustered-point\")) {\n        map.addLayer({\n          id: \"unclustered-point\",\n          type: \"circle\",\n          source: \"stations\",\n          filter: [\"!\", [\"has\", \"point_count\"]],\n          paint: {\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"zoom\"],\n              0, 3,\n              6, 5,\n              10, 7,\n              15, 12,\n            ],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9,\n          },\n        });\n      }\n\n      console.log(\"✅ Cluster + point layers added\");\n\n      // Smooth zoom animation into a cluster\n      map.on(\"click\", \"clusters\", (e) => {\n        const features = map.queryRenderedFeatures(e.point, {\n          layers: [\"clusters\"],\n        });\n        const clusterId = features[0].properties.cluster_id;\n        const coordinates = features[0].geometry.coordinates;\n        const source = map.getSource(\"stations\");\n\n        source.getClusterExpansionZoom(clusterId, (err, zoom) => {\n          if (err) return;\n          map.easeTo({\n            center: coordinates,\n            zoom,\n            duration: 600,\n            essential: true,\n          });\n        });\n      });\n\n      // Popup for a single station\n      map.on(\"click\", \"unclustered-point\", (e) => {\n        const f = e.features?.[0];\n        if (!f) return;\n        const { id, name, country } = f.properties;\n        new mapboxgl.Popup({ closeOnMove: true })\n          .setLngLat(f.geometry.coordinates)\n          .setHTML(\n            `<strong>${name}</strong><br/>ID: ${id}<br/>Country: ${country}`\n          )\n          .addTo(map);\n      });\n\n      // Pointer cursor on hover\n      const pointerLayers = [\"clusters\", \"unclustered-point\"];\n      pointerLayers.forEach((layerId) => {\n        map.on(\"mouseenter\", layerId, () => {\n          map.getCanvas().style.cursor = \"pointer\";\n        });\n        map.on(\"mouseleave\", layerId, () => {\n          map.getCanvas().style.cursor = \"\";\n        });\n      });\n\n      // Fit to region (Norway-ish)\n      map.fitBounds(\n        [\n          [4, 57],\n          [31, 72],\n        ],\n        { padding: 20, duration: 700 }\n      );\n\n      // Explicit render errors\n      map.on(\"error\", (e) => console.error(\"🛑 Mapbox error:\", e?.error));\n    };\n\n    init();\n\n    // Optional cleanup on unmount\n    return () => {\n      if (mapRef.current) {\n        mapRef.current.remove();\n        mapRef.current = null;\n      }\n    };\n  }, []);\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}