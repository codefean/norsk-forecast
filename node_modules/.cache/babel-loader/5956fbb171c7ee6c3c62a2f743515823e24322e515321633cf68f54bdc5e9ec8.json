{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  /**\n   * Convert Frost API data into valid GeoJSON\n   */\n  const frostToGeoJSON = stations => {\n    const features = stations.filter(station => {\n      var _station$geometry;\n      const coords = (_station$geometry = station.geometry) === null || _station$geometry === void 0 ? void 0 : _station$geometry.coordinates;\n      return coords && Array.isArray(coords) && coords.length === 2 && typeof coords[0] === \"number\" && typeof coords[1] === \"number\";\n    }).map(station => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: station.geometry.coordinates\n      },\n      properties: {\n        id: station.id,\n        name: station.name,\n        shortName: station.shortName || \"Unknown\",\n        country: station.country || \"Norway\"\n      }\n    }));\n    console.log(`‚úÖ Converted ${features.length} valid stations into GeoJSON`);\n    return {\n      type: \"FeatureCollection\",\n      features\n    };\n  };\n\n  /**\n   * Fetch stations from Frost API\n   */\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"üåç Fetching stations from Frost API...\");\n      const response = await fetch(\"/frost/sources/v0.jsonld?types=SensorSystem\", {\n        headers: {\n          Authorization: `Basic ${frostAuth}`,\n          Accept: \"application/json\"\n        }\n      });\n      console.log(\"üîÑ Response status:\", response.status);\n      if (!response.ok) {\n        throw new Error(`‚ùå Frost API error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"üì¶ Frost API raw data:\", data);\n      if (!data || !Array.isArray(data.data)) {\n        console.error(\"üö® Invalid Frost API response format\");\n        return [];\n      }\n      return data.data || [];\n    } catch (error) {\n      console.error(\"üö® Error fetching Frost data:\", error);\n      return [];\n    }\n  };\n  useEffect(() => {\n    const initMap = async () => {\n      // Prevent double initialization\n      if (mapRef.current) return;\n      console.log(\"üó∫Ô∏è Initializing Mapbox map...\");\n\n      // Create map instance\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        zoom: 5\n      });\n\n      // Wait until the map has fully loaded\n      await new Promise(resolve => mapRef.current.on(\"load\", resolve));\n      console.log(\"üõ∞Ô∏è Mapbox map loaded\");\n\n      // Fetch station data **after** map is ready\n      const stations = await fetchStations();\n      console.log(`üìä Total stations fetched: ${stations.length}`);\n      if (stations.length === 0) {\n        console.warn(\"‚ö†Ô∏è No stations returned from Frost API\");\n        return;\n      }\n      const geojson = frostToGeoJSON(stations);\n      console.log(\"üåê GeoJSON ready:\", geojson);\n\n      // Use Blob URL to avoid large inline object rejection\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Safely add source if it doesn't exist yet\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url\n        });\n      }\n\n      // Safely add layer if it doesn't exist yet\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 3, 5, 5, 10, 8, 15, 14],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9\n          }\n        });\n      }\n      console.log(\"‚úÖ Station layer added successfully\");\n\n      // Debug: confirm source presence\n      setTimeout(() => {\n        const source = mapRef.current.getSource(\"stations\");\n        console.log(\"üì° Stations source object:\", source);\n        if (!source) {\n          console.error(\"üö® Mapbox rejected the GeoJSON source!\");\n        }\n      }, 500);\n\n      // Fit bounds to Norway\n      mapRef.current.fitBounds([[4, 57], [31, 72]], {\n        padding: 20\n      });\n\n      // Interactivity: Popup on click\n      mapRef.current.on(\"click\", \"stations-layer\", e => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n        new mapboxgl.Popup().setLngLat(coords).setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id}<br/>\n            Country: ${props.country}\n          `).addTo(mapRef.current);\n      });\n\n      // Change cursor on hover\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"pointer\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"\";\n      });\n\n      // Catch Mapbox rendering errors explicitly\n      mapRef.current.on(\"error\", e => {\n        console.error(\"üõë Mapbox rendering error:\", e.error);\n      });\n    };\n    initMap();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 209,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"trBYWQnBQabdsyB7ysINFei525A=\");\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","mapboxgl","jsxDEV","_jsxDEV","accessToken","FROST_CLIENT_ID","FROST_CLIENT_SECRET","WeatherStationsMap","_s","mapContainer","mapRef","frostToGeoJSON","stations","features","filter","station","_station$geometry","coords","geometry","coordinates","Array","isArray","length","map","type","properties","id","name","shortName","country","console","log","fetchStations","frostAuth","btoa","response","fetch","headers","Authorization","Accept","status","ok","Error","data","json","error","initMap","current","Map","container","style","center","zoom","Promise","resolve","on","warn","geojson","blob","Blob","JSON","stringify","url","URL","createObjectURL","getSource","addSource","getLayer","addLayer","source","paint","setTimeout","fitBounds","padding","e","props","Popup","setLngLat","setHTML","addTo","getCanvas","cursor","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  /**\n   * Convert Frost API data into valid GeoJSON\n   */\n  const frostToGeoJSON = (stations) => {\n    const features = stations\n      .filter((station) => {\n        const coords = station.geometry?.coordinates;\n        return (\n          coords &&\n          Array.isArray(coords) &&\n          coords.length === 2 &&\n          typeof coords[0] === \"number\" &&\n          typeof coords[1] === \"number\"\n        );\n      })\n      .map((station) => ({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: station.geometry.coordinates,\n        },\n        properties: {\n          id: station.id,\n          name: station.name,\n          shortName: station.shortName || \"Unknown\",\n          country: station.country || \"Norway\",\n        },\n      }));\n\n    console.log(`‚úÖ Converted ${features.length} valid stations into GeoJSON`);\n    return { type: \"FeatureCollection\", features };\n  };\n\n  /**\n   * Fetch stations from Frost API\n   */\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"üåç Fetching stations from Frost API...\");\n\n      const response = await fetch(\n        \"/frost/sources/v0.jsonld?types=SensorSystem\",\n        {\n          headers: {\n            Authorization: `Basic ${frostAuth}`,\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      console.log(\"üîÑ Response status:\", response.status);\n\n      if (!response.ok) {\n        throw new Error(`‚ùå Frost API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"üì¶ Frost API raw data:\", data);\n\n      if (!data || !Array.isArray(data.data)) {\n        console.error(\"üö® Invalid Frost API response format\");\n        return [];\n      }\n\n      return data.data || [];\n    } catch (error) {\n      console.error(\"üö® Error fetching Frost data:\", error);\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    const initMap = async () => {\n      // Prevent double initialization\n      if (mapRef.current) return;\n\n      console.log(\"üó∫Ô∏è Initializing Mapbox map...\");\n\n      // Create map instance\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        zoom: 5,\n      });\n\n      // Wait until the map has fully loaded\n      await new Promise((resolve) => mapRef.current.on(\"load\", resolve));\n      console.log(\"üõ∞Ô∏è Mapbox map loaded\");\n\n      // Fetch station data **after** map is ready\n      const stations = await fetchStations();\n      console.log(`üìä Total stations fetched: ${stations.length}`);\n\n      if (stations.length === 0) {\n        console.warn(\"‚ö†Ô∏è No stations returned from Frost API\");\n        return;\n      }\n\n      const geojson = frostToGeoJSON(stations);\n      console.log(\"üåê GeoJSON ready:\", geojson);\n\n      // Use Blob URL to avoid large inline object rejection\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n\n      // Safely add source if it doesn't exist yet\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url,\n        });\n      }\n\n      // Safely add layer if it doesn't exist yet\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"zoom\"],\n              0, 3,\n              5, 5,\n              10, 8,\n              15, 14,\n            ],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9,\n          },\n        });\n      }\n\n      console.log(\"‚úÖ Station layer added successfully\");\n\n      // Debug: confirm source presence\n      setTimeout(() => {\n        const source = mapRef.current.getSource(\"stations\");\n        console.log(\"üì° Stations source object:\", source);\n        if (!source) {\n          console.error(\"üö® Mapbox rejected the GeoJSON source!\");\n        }\n      }, 500);\n\n      // Fit bounds to Norway\n      mapRef.current.fitBounds(\n        [\n          [4, 57],\n          [31, 72],\n        ],\n        { padding: 20 }\n      );\n\n      // Interactivity: Popup on click\n      mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n\n        new mapboxgl.Popup()\n          .setLngLat(coords)\n          .setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id}<br/>\n            Country: ${props.country}\n          `)\n          .addTo(mapRef.current);\n      });\n\n      // Change cursor on hover\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"pointer\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"\";\n      });\n\n      // Catch Mapbox rendering errors explicitly\n      mapRef.current.on(\"error\", (e) => {\n        console.error(\"üõë Mapbox rendering error:\", e.error);\n      });\n    };\n\n    initMap();\n  }, []);\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}