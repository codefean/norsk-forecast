{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\n// src/components/WeatherStationsMap.jsx\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { fetchStations } from \"./pages/frostAPI\";\nimport { frostToGeoJSON } from \"./pages/geojsonUtils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n      console.log(\"🗺️ Initializing Mapbox map...\");\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        // Oslo-ish\n        zoom: 3.8\n      });\n      await new Promise(resolve => mapRef.current.on(\"load\", resolve));\n      console.log(\"🛰️ Mapbox map fully loaded\");\n\n      // Fetch Frost API station data\n      const stations = await fetchStations();\n      console.log(`📊 Total stations fetched: ${stations.length}`);\n      if (stations.length === 0) {\n        console.warn(\"⚠️ No stations returned from Frost API\");\n        return;\n      }\n\n      // ✅ Filter stations based on coordinates\n      const filteredStations = stations.filter(station => {\n        try {\n          var _station$geometry;\n          const coordsStr = (_station$geometry = station.geometry) === null || _station$geometry === void 0 ? void 0 : _station$geometry.coordinates;\n          if (!coordsStr) return false;\n\n          // Coordinates come as \"lat, lon\"\n          const [latStr, lonStr] = coordsStr.split(\",\");\n          const lat = parseFloat(latStr);\n          const lon = parseFloat(lonStr);\n\n          // Bounding box for Sweden, Norway, Finland, Svalbard, Iceland, Greenland\n          const inside = lon >= -56 && lon <= 32 &&\n          // Longitude from Greenland (-56) to Finland (32)\n          lat >= 57 && lat <= 84; // Latitude from Denmark (~57) up to Svalbard (~84)\n\n          return inside;\n        } catch (err) {\n          console.warn(\"⚠️ Skipping station with invalid coords:\", station);\n          return false;\n        }\n      });\n      console.log(`📌 Showing ${filteredStations.length} stations after filtering`);\n      const geojson = frostToGeoJSON(filteredStations);\n\n      // ✅ Use Blob URL to avoid Mapbox rejecting large inline GeoJSON\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\"\n      });\n      const url = URL.createObjectURL(blob);\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url\n        });\n        console.log(\"📡 GeoJSON source added successfully\");\n      }\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 3, 5, 5, 10, 8, 15, 14],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9\n          }\n        });\n        console.log(\"✅ Station layer added successfully\");\n      }\n\n      // Fit map to cover the entire region\n      mapRef.current.fitBounds([[-56, 57],\n      // SW corner (Greenland)\n      [32, 84] // NE corner (Svalbard)\n      ], {\n        padding: 30\n      });\n\n      // Popup on station click\n      mapRef.current.on(\"click\", \"stations-layer\", e => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n        new mapboxgl.Popup().setLngLat(coords).setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id || \"N/A\"}<br/>\n            Coordinates: ${coords.join(\", \")}\n          `).addTo(mapRef.current);\n      });\n\n      // Change cursor on hover\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"pointer\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"\";\n      });\n\n      // Handle Mapbox rendering errors explicitly\n      mapRef.current.on(\"error\", e => {\n        console.error(\"🛑 Mapbox rendering error:\", e.error);\n      });\n    };\n    initMap();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"trBYWQnBQabdsyB7ysINFei525A=\");\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","mapboxgl","fetchStations","frostToGeoJSON","jsxDEV","_jsxDEV","accessToken","WeatherStationsMap","_s","mapContainer","mapRef","initMap","current","console","log","Map","container","style","center","zoom","Promise","resolve","on","stations","length","warn","filteredStations","filter","station","_station$geometry","coordsStr","geometry","coordinates","latStr","lonStr","split","lat","parseFloat","lon","inside","err","geojson","blob","Blob","JSON","stringify","type","url","URL","createObjectURL","getSource","addSource","data","getLayer","addLayer","id","source","paint","fitBounds","padding","e","props","features","properties","coords","Popup","setLngLat","setHTML","name","join","addTo","getCanvas","cursor","error","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["// src/components/WeatherStationsMap.jsx\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { fetchStations } from \"./pages/frostAPI\";\nimport { frostToGeoJSON } from \"./pages/geojsonUtils\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n\n      console.log(\"🗺️ Initializing Mapbox map...\");\n\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91], // Oslo-ish\n        zoom: 3.8,\n      });\n\n      await new Promise((resolve) => mapRef.current.on(\"load\", resolve));\n      console.log(\"🛰️ Mapbox map fully loaded\");\n\n      // Fetch Frost API station data\n      const stations = await fetchStations();\n      console.log(`📊 Total stations fetched: ${stations.length}`);\n\n      if (stations.length === 0) {\n        console.warn(\"⚠️ No stations returned from Frost API\");\n        return;\n      }\n\n      // ✅ Filter stations based on coordinates\n      const filteredStations = stations.filter((station) => {\n        try {\n          const coordsStr = station.geometry?.coordinates;\n          if (!coordsStr) return false;\n\n          // Coordinates come as \"lat, lon\"\n          const [latStr, lonStr] = coordsStr.split(\",\");\n          const lat = parseFloat(latStr);\n          const lon = parseFloat(lonStr);\n\n          // Bounding box for Sweden, Norway, Finland, Svalbard, Iceland, Greenland\n          const inside =\n            lon >= -56 && lon <= 32 && // Longitude from Greenland (-56) to Finland (32)\n            lat >= 57 && lat <= 84;   // Latitude from Denmark (~57) up to Svalbard (~84)\n\n          return inside;\n        } catch (err) {\n          console.warn(\"⚠️ Skipping station with invalid coords:\", station);\n          return false;\n        }\n      });\n\n      console.log(`📌 Showing ${filteredStations.length} stations after filtering`);\n\n      const geojson = frostToGeoJSON(filteredStations);\n\n      // ✅ Use Blob URL to avoid Mapbox rejecting large inline GeoJSON\n      const blob = new Blob([JSON.stringify(geojson)], {\n        type: \"application/json\",\n      });\n      const url = URL.createObjectURL(blob);\n\n      if (!mapRef.current.getSource(\"stations\")) {\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: url,\n        });\n        console.log(\"📡 GeoJSON source added successfully\");\n      }\n\n      if (!mapRef.current.getLayer(\"stations-layer\")) {\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"zoom\"],\n              0, 3,\n              5, 5,\n              10, 8,\n              15, 14,\n            ],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9,\n          },\n        });\n        console.log(\"✅ Station layer added successfully\");\n      }\n\n      // Fit map to cover the entire region\n      mapRef.current.fitBounds(\n        [\n          [-56, 57], // SW corner (Greenland)\n          [32, 84],  // NE corner (Svalbard)\n        ],\n        { padding: 30 }\n      );\n\n      // Popup on station click\n      mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n        const props = e.features[0].properties;\n        const coords = e.features[0].geometry.coordinates;\n\n        new mapboxgl.Popup()\n          .setLngLat(coords)\n          .setHTML(`\n            <strong>${props.name}</strong><br/>\n            ID: ${props.id || \"N/A\"}<br/>\n            Coordinates: ${coords.join(\", \")}\n          `)\n          .addTo(mapRef.current);\n      });\n\n      // Change cursor on hover\n      mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"pointer\";\n      });\n      mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n        mapRef.current.getCanvas().style.cursor = \"\";\n      });\n\n      // Handle Mapbox rendering errors explicitly\n      mapRef.current.on(\"error\", (e) => {\n        console.error(\"🛑 Mapbox rendering error:\", e.error);\n      });\n    };\n\n    initMap();\n  }, []);\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}