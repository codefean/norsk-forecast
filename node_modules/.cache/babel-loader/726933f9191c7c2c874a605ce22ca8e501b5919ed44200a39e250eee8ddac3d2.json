{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Directly use your Mapbox token\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\n// Frost API credentials (hardcoded)\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  // Convert Frost API response into GeoJSON and fix coordinate order\n  const frostToGeoJSON = stations => {\n    const features = stations.filter(station => station.geometry && station.geometry.coordinates).map(station => {\n      const [lat, lon] = station.geometry.coordinates; // Frost gives [lat, lon]\n      return {\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: [lon, lat] // Mapbox expects [lon, lat]\n        },\n        properties: {\n          id: station.id,\n          name: station.name,\n          shortName: station.shortName || \"Unknown\",\n          country: station.country || \"Norway\"\n        }\n      };\n    });\n    console.log(`‚úÖ Converted ${features.length} stations into GeoJSON features`);\n    console.log(\"üîç First station after swap:\", features[0]);\n    return {\n      type: \"FeatureCollection\",\n      features\n    };\n  };\n\n  // Fetch stations from Frost API via local proxy\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"üåç Fetching stations from Frost API...\");\n      const response = await fetch(\"/frost/sources/v0.jsonld?types=SensorSystem\", {\n        headers: {\n          Authorization: `Basic ${frostAuth}`,\n          Accept: \"application/json\"\n        }\n      });\n      console.log(\"üîÑ Response status:\", response.status);\n      if (!response.ok) {\n        throw new Error(`‚ùå Frost API error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"üì¶ Frost API raw data:\", data);\n      return data.data || [];\n    } catch (error) {\n      console.error(\"üö® Error fetching Frost data:\", error);\n      return [];\n    }\n  };\n\n  // Initialize Mapbox and add stations\n  useEffect(() => {\n    const initMap = async () => {\n      var _geojson$features$;\n      if (mapRef.current) return;\n      console.log(\"üó∫Ô∏è Initializing Mapbox map...\");\n\n      // Initialize Mapbox map\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        // Oslo\n        zoom: 5\n      });\n\n      // Add a test marker in Oslo to confirm the map works\n      new mapboxgl.Marker().setLngLat([10.75, 59.91]).setPopup(new mapboxgl.Popup().setText(\"Test Marker\")).addTo(mapRef.current);\n\n      // Fetch stations\n      const stations = await fetchStations();\n      console.log(`üìä Total stations fetched: ${stations.length}`);\n      if (stations.length === 0) {\n        console.warn(\"‚ö†Ô∏è No stations returned from Frost API\");\n        return;\n      }\n      const geojson = frostToGeoJSON(stations);\n      console.log(\"üåê GeoJSON:\", geojson);\n      console.log(\"üîç First station coords:\", (_geojson$features$ = geojson.features[0]) === null || _geojson$features$ === void 0 ? void 0 : _geojson$features$.geometry.coordinates);\n\n      // Add station markers to map\n      mapRef.current.on(\"load\", () => {\n        console.log(\"üõ∞Ô∏è Mapbox loaded, adding station data...\");\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson\n        });\n\n        // Add the stations layer ABOVE labels so points are visible\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            // Dynamic size: smaller when zoomed out, bigger when zoomed in\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 3, 5, 5, 10, 8, 15, 12],\n            \"circle-color\": \"#007cbf\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.85\n          }\n        }, \"waterway-label\" // Put above map labels\n        );\n        console.log(\"‚úÖ Station layer added to map\");\n\n        // Add popups on click\n        mapRef.current.on(\"click\", \"stations-layer\", e => {\n          const props = e.features[0].properties;\n          const coords = e.features[0].geometry.coordinates;\n          new mapboxgl.Popup().setLngLat(coords).setHTML(`\n              <strong>${props.name}</strong><br/>\n              ID: ${props.id}<br/>\n              Country: ${props.country}\n            `).addTo(mapRef.current);\n        });\n\n        // Change cursor when hovering stations\n        mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"pointer\";\n        });\n        mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"\";\n        });\n      });\n    };\n    initMap();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 180,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"trBYWQnBQabdsyB7ysINFei525A=\");\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","mapboxgl","jsxDEV","_jsxDEV","accessToken","FROST_CLIENT_ID","FROST_CLIENT_SECRET","WeatherStationsMap","_s","mapContainer","mapRef","frostToGeoJSON","stations","features","filter","station","geometry","coordinates","map","lat","lon","type","properties","id","name","shortName","country","console","log","length","fetchStations","frostAuth","btoa","response","fetch","headers","Authorization","Accept","status","ok","Error","data","json","error","initMap","_geojson$features$","current","Map","container","style","center","zoom","Marker","setLngLat","setPopup","Popup","setText","addTo","warn","geojson","on","addSource","addLayer","source","paint","e","props","coords","setHTML","getCanvas","cursor","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\n// Directly use your Mapbox token\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\n// Frost API credentials (hardcoded)\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  // Convert Frost API response into GeoJSON and fix coordinate order\n  const frostToGeoJSON = (stations) => {\n    const features = stations\n      .filter((station) => station.geometry && station.geometry.coordinates)\n      .map((station) => {\n        const [lat, lon] = station.geometry.coordinates; // Frost gives [lat, lon]\n        return {\n          type: \"Feature\",\n          geometry: {\n            type: \"Point\",\n            coordinates: [lon, lat], // Mapbox expects [lon, lat]\n          },\n          properties: {\n            id: station.id,\n            name: station.name,\n            shortName: station.shortName || \"Unknown\",\n            country: station.country || \"Norway\",\n          },\n        };\n      });\n\n    console.log(`‚úÖ Converted ${features.length} stations into GeoJSON features`);\n    console.log(\"üîç First station after swap:\", features[0]);\n    return {\n      type: \"FeatureCollection\",\n      features,\n    };\n  };\n\n  // Fetch stations from Frost API via local proxy\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n\n      console.log(\"üåç Fetching stations from Frost API...\");\n\n      const response = await fetch(\n        \"/frost/sources/v0.jsonld?types=SensorSystem\",\n        {\n          headers: {\n            Authorization: `Basic ${frostAuth}`,\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      console.log(\"üîÑ Response status:\", response.status);\n\n      if (!response.ok) {\n        throw new Error(`‚ùå Frost API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"üì¶ Frost API raw data:\", data);\n\n      return data.data || [];\n    } catch (error) {\n      console.error(\"üö® Error fetching Frost data:\", error);\n      return [];\n    }\n  };\n\n  // Initialize Mapbox and add stations\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n\n      console.log(\"üó∫Ô∏è Initializing Mapbox map...\");\n\n      // Initialize Mapbox map\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91], // Oslo\n        zoom: 5,\n      });\n\n      // Add a test marker in Oslo to confirm the map works\n      new mapboxgl.Marker()\n        .setLngLat([10.75, 59.91])\n        .setPopup(new mapboxgl.Popup().setText(\"Test Marker\"))\n        .addTo(mapRef.current);\n\n      // Fetch stations\n      const stations = await fetchStations();\n      console.log(`üìä Total stations fetched: ${stations.length}`);\n\n      if (stations.length === 0) {\n        console.warn(\"‚ö†Ô∏è No stations returned from Frost API\");\n        return;\n      }\n\n      const geojson = frostToGeoJSON(stations);\n      console.log(\"üåê GeoJSON:\", geojson);\n      console.log(\"üîç First station coords:\", geojson.features[0]?.geometry.coordinates);\n\n      // Add station markers to map\n      mapRef.current.on(\"load\", () => {\n        console.log(\"üõ∞Ô∏è Mapbox loaded, adding station data...\");\n\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson,\n        });\n\n        // Add the stations layer ABOVE labels so points are visible\n        mapRef.current.addLayer(\n          {\n            id: \"stations-layer\",\n            type: \"circle\",\n            source: \"stations\",\n            paint: {\n              // Dynamic size: smaller when zoomed out, bigger when zoomed in\n              \"circle-radius\": [\n                \"interpolate\",\n                [\"linear\"],\n                [\"zoom\"],\n                0, 3,\n                5, 5,\n                10, 8,\n                15, 12,\n              ],\n              \"circle-color\": \"#007cbf\",\n              \"circle-stroke-width\": 1,\n              \"circle-stroke-color\": \"#fff\",\n              \"circle-opacity\": 0.85,\n            },\n          },\n          \"waterway-label\" // Put above map labels\n        );\n\n        console.log(\"‚úÖ Station layer added to map\");\n\n        // Add popups on click\n        mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n          const props = e.features[0].properties;\n          const coords = e.features[0].geometry.coordinates;\n\n          new mapboxgl.Popup()\n            .setLngLat(coords)\n            .setHTML(`\n              <strong>${props.name}</strong><br/>\n              ID: ${props.id}<br/>\n              Country: ${props.country}\n            `)\n            .addTo(mapRef.current);\n        });\n\n        // Change cursor when hovering stations\n        mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"pointer\";\n        });\n\n        mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"\";\n        });\n      });\n    };\n\n    initMap();\n  }, []);\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}