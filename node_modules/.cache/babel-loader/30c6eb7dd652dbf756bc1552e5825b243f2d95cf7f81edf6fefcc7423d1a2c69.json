{"ast":null,"code":"// src/api/frostAPI.js\n\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\n\n/**\n * Fetch weather stations from Frost API\n */\nexport const fetchStations = async () => {\n  try {\n    const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n    console.log(\"üåç Fetching stations from Frost API...\");\n    const response = await fetch(\"/frost/sources/v0.jsonld?types=SensorSystem\", {\n      headers: {\n        Authorization: `Basic ${frostAuth}`,\n        Accept: \"application/json\"\n      }\n    });\n    console.log(\"üîÑ Response status:\", response.status);\n    if (!response.ok) {\n      throw new Error(`‚ùå Frost API error: ${response.status}`);\n    }\n    const data = await response.json();\n    console.log(\"üì¶ Frost API raw data:\", data);\n    if (!data || !Array.isArray(data.data)) {\n      console.error(\"üö® Invalid Frost API response format\");\n      return [];\n    }\n    return data.data || [];\n  } catch (error) {\n    console.error(\"üö® Error fetching Frost data:\", error);\n    return [];\n  }\n};","map":{"version":3,"names":["FROST_CLIENT_ID","FROST_CLIENT_SECRET","fetchStations","frostAuth","btoa","console","log","response","fetch","headers","Authorization","Accept","status","ok","Error","data","json","Array","isArray","error"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/pages/frostAPI.js"],"sourcesContent":["// src/api/frostAPI.js\n\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\n\n/**\n * Fetch weather stations from Frost API\n */\nexport const fetchStations = async () => {\n  try {\n    const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n    console.log(\"üåç Fetching stations from Frost API...\");\n\n    const response = await fetch(\n      \"/frost/sources/v0.jsonld?types=SensorSystem\",\n      {\n        headers: {\n          Authorization: `Basic ${frostAuth}`,\n          Accept: \"application/json\",\n        },\n      }\n    );\n\n    console.log(\"üîÑ Response status:\", response.status);\n\n    if (!response.ok) {\n      throw new Error(`‚ùå Frost API error: ${response.status}`);\n    }\n\n    const data = await response.json();\n    console.log(\"üì¶ Frost API raw data:\", data);\n\n    if (!data || !Array.isArray(data.data)) {\n      console.error(\"üö® Invalid Frost API response format\");\n      return [];\n    }\n\n    return data.data || [];\n  } catch (error) {\n    console.error(\"üö® Error fetching Frost data:\", error);\n    return [];\n  }\n};\n"],"mappings":"AAAA;;AAEA,MAAMA,eAAe,GAAG,sCAAsC;AAC9D,MAAMC,mBAAmB,GAAG,sCAAsC;;AAElE;AACA;AACA;AACA,OAAO,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;EACvC,IAAI;IACF,MAAMC,SAAS,GAAGC,IAAI,CAAC,GAAGJ,eAAe,IAAIC,mBAAmB,EAAE,CAAC;IACnEI,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IAErD,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,6CAA6C,EAC7C;MACEC,OAAO,EAAE;QACPC,aAAa,EAAE,SAASP,SAAS,EAAE;QACnCQ,MAAM,EAAE;MACV;IACF,CACF,CAAC;IAEDN,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEC,QAAQ,CAACK,MAAM,CAAC;IAEnD,IAAI,CAACL,QAAQ,CAACM,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,sBAAsBP,QAAQ,CAACK,MAAM,EAAE,CAAC;IAC1D;IAEA,MAAMG,IAAI,GAAG,MAAMR,QAAQ,CAACS,IAAI,CAAC,CAAC;IAClCX,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAES,IAAI,CAAC;IAE3C,IAAI,CAACA,IAAI,IAAI,CAACE,KAAK,CAACC,OAAO,CAACH,IAAI,CAACA,IAAI,CAAC,EAAE;MACtCV,OAAO,CAACc,KAAK,CAAC,sCAAsC,CAAC;MACrD,OAAO,EAAE;IACX;IAEA,OAAOJ,IAAI,CAACA,IAAI,IAAI,EAAE;EACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;IACdd,OAAO,CAACc,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,EAAE;EACX;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}