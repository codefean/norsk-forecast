{"ast":null,"code":"// src/api/frostApi.js\nimport { frostToGeoJSON } from \"../utils/transform\";\n\n// Fetch list of weather stations\nexport async function fetchStations() {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n  const res = await fetch(\"/sources/v0.jsonld?types=SensorSystem&country=NO\", {\n    headers: {\n      \"Authorization\": \"Basic \" + btoa(clientId + \":\"),\n      \"Accept\": \"application/json\"\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch stations\");\n  return await res.json();\n}\n\n// Fetch latest observations for given stations\nexport async function fetchObservations(stationIds) {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n  const sources = stationIds.join(\",\");\n  const url = \"/observations/v0.jsonld\" + `?sources=${sources}` + \"&elements=snow_depth,precipitation_type,wind_speed\" + \"&referencetime=latest\";\n  const res = await fetch(url, {\n    headers: {\n      Authorization: \"Basic \" + btoa(clientId + \":\"),\n      Accept: \"application/json\"\n    }\n  });\n  if (!res.ok) throw new Error(\"Failed to fetch observations\");\n  const frostData = await res.json();\n  return frostToGeoJSON(frostData); // transform into GeoJSON here\n}","map":{"version":3,"names":["frostToGeoJSON","fetchStations","clientId","process","env","REACT_APP_FROST_CLIENT_ID","res","fetch","headers","btoa","ok","Error","json","fetchObservations","stationIds","sources","join","url","Authorization","Accept","frostData"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/api/frostApi.js"],"sourcesContent":["// src/api/frostApi.js\nimport { frostToGeoJSON } from \"../utils/transform\";\n\n// Fetch list of weather stations\nexport async function fetchStations() {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n\nconst res = await fetch(\n  \"/sources/v0.jsonld?types=SensorSystem&country=NO\",\n  {\n    headers: {\n      \"Authorization\": \"Basic \" + btoa(clientId + \":\"),\n      \"Accept\": \"application/json\",\n    },\n  }\n);\n\n\n  if (!res.ok) throw new Error(\"Failed to fetch stations\");\n  return await res.json();\n}\n\n// Fetch latest observations for given stations\nexport async function fetchObservations(stationIds) {\n  const clientId = process.env.REACT_APP_FROST_CLIENT_ID;\n  const sources = stationIds.join(\",\");\n\nconst url =\n  \"/observations/v0.jsonld\" +\n  `?sources=${sources}` +\n  \"&elements=snow_depth,precipitation_type,wind_speed\" +\n  \"&referencetime=latest\";\n\n\n  const res = await fetch(url, {\n    headers: {\n      Authorization: \"Basic \" + btoa(clientId + \":\"),\n      Accept: \"application/json\",\n    },\n  });\n\n  if (!res.ok) throw new Error(\"Failed to fetch observations\");\n\n  const frostData = await res.json();\n  return frostToGeoJSON(frostData); // transform into GeoJSON here\n}\n"],"mappings":"AAAA;AACA,SAASA,cAAc,QAAQ,oBAAoB;;AAEnD;AACA,OAAO,eAAeC,aAAaA,CAAA,EAAG;EACpC,MAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EAExD,MAAMC,GAAG,GAAG,MAAMC,KAAK,CACrB,kDAAkD,EAClD;IACEC,OAAO,EAAE;MACP,eAAe,EAAE,QAAQ,GAAGC,IAAI,CAACP,QAAQ,GAAG,GAAG,CAAC;MAChD,QAAQ,EAAE;IACZ;EACF,CACF,CAAC;EAGC,IAAI,CAACI,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,0BAA0B,CAAC;EACxD,OAAO,MAAML,GAAG,CAACM,IAAI,CAAC,CAAC;AACzB;;AAEA;AACA,OAAO,eAAeC,iBAAiBA,CAACC,UAAU,EAAE;EAClD,MAAMZ,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,yBAAyB;EACtD,MAAMU,OAAO,GAAGD,UAAU,CAACE,IAAI,CAAC,GAAG,CAAC;EAEtC,MAAMC,GAAG,GACP,yBAAyB,GACzB,YAAYF,OAAO,EAAE,GACrB,oDAAoD,GACpD,uBAAuB;EAGvB,MAAMT,GAAG,GAAG,MAAMC,KAAK,CAACU,GAAG,EAAE;IAC3BT,OAAO,EAAE;MACPU,aAAa,EAAE,QAAQ,GAAGT,IAAI,CAACP,QAAQ,GAAG,GAAG,CAAC;MAC9CiB,MAAM,EAAE;IACV;EACF,CAAC,CAAC;EAEF,IAAI,CAACb,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,8BAA8B,CAAC;EAE5D,MAAMS,SAAS,GAAG,MAAMd,GAAG,CAACM,IAAI,CAAC,CAAC;EAClC,OAAOZ,cAAc,CAACoB,SAAS,CAAC,CAAC,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}