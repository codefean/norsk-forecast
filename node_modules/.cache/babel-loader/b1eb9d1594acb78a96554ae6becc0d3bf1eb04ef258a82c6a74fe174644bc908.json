{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { fetchFrostData } from \"./api/frostApi\";\nimport { frostToGeoJSON } from \"./utils/transform\";\nimport MapView from \"./components/MapView\";\nimport Legend from \"./components/Legend\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [geojson, setGeojson] = useState(null);\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const frostData = await fetchFrostData();\n        const geo = frostToGeoJSON(frostData);\n        setGeojson(geo);\n      } catch (err) {\n        console.error(\"Error loading Frost data\", err);\n      }\n    }\n    loadData();\n    const interval = setInterval(loadData, 300000); // refresh every 5 min\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MapView, {\n      geojson: geojson\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"waqGc2SyalV4Q1ch1pgHvBE7HDE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","fetchFrostData","frostToGeoJSON","MapView","Legend","jsxDEV","_jsxDEV","App","_s","geojson","setGeojson","loadData","frostData","geo","err","console","error","interval","setInterval","clearInterval","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { fetchFrostData } from \"./api/frostApi\";\nimport { frostToGeoJSON } from \"./utils/transform\";\nimport MapView from \"./components/MapView\";\nimport Legend from \"./components/Legend\";\n\nfunction App() {\n  const [geojson, setGeojson] = useState(null);\n\n  useEffect(() => {\n    async function loadData() {\n      try {\n        const frostData = await fetchFrostData();\n        const geo = frostToGeoJSON(frostData);\n        setGeojson(geo);\n      } catch (err) {\n        console.error(\"Error loading Frost data\", err);\n      }\n    }\n\n    loadData();\n    const interval = setInterval(loadData, 300000); // refresh every 5 min\n    return () => clearInterval(interval);\n  }, []);\n\n  return (\n    <div>\n      <MapView geojson={geojson} />\n      <Legend />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,cAAc,QAAQ,gBAAgB;AAC/C,SAASC,cAAc,QAAQ,mBAAmB;AAClD,OAAOC,OAAO,MAAM,sBAAsB;AAC1C,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,eAAeY,QAAQA,CAAA,EAAG;MACxB,IAAI;QACF,MAAMC,SAAS,GAAG,MAAMX,cAAc,CAAC,CAAC;QACxC,MAAMY,GAAG,GAAGX,cAAc,CAACU,SAAS,CAAC;QACrCF,UAAU,CAACG,GAAG,CAAC;MACjB,CAAC,CAAC,OAAOC,GAAG,EAAE;QACZC,OAAO,CAACC,KAAK,CAAC,0BAA0B,EAAEF,GAAG,CAAC;MAChD;IACF;IAEAH,QAAQ,CAAC,CAAC;IACV,MAAMM,QAAQ,GAAGC,WAAW,CAACP,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;IAChD,OAAO,MAAMQ,aAAa,CAACF,QAAQ,CAAC;EACtC,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEX,OAAA;IAAAc,QAAA,gBACEd,OAAA,CAACH,OAAO;MAACM,OAAO,EAAEA;IAAQ;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC7BlB,OAAA,CAACF,MAAM;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACP,CAAC;AAEV;AAAChB,EAAA,CAzBQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AA2BZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}