{"ast":null,"code":"var _jsxFileName = \"/Users/seanfagan/Desktop/climate-globe/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nmapboxgl.accessToken = \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\nconst WeatherStationsMap = () => {\n  _s();\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n  const frostToGeoJSON = stations => {\n    const features = stations.filter(station => station.geometry && station.geometry.coordinates).map(station => ({\n      type: \"Feature\",\n      geometry: {\n        type: \"Point\",\n        coordinates: station.geometry.coordinates\n      },\n      properties: {\n        id: station.id,\n        name: station.name,\n        shortName: station.shortName || \"Unknown\",\n        country: station.country || \"Norway\"\n      }\n    }));\n    console.log(`‚úÖ Converted ${features.length} stations into GeoJSON features`);\n    console.log(\"üîç First station:\", features[0]);\n    return {\n      type: \"FeatureCollection\",\n      features\n    };\n  };\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"üåç Fetching stations from Frost API...\");\n      const response = await fetch(\"/frost/sources/v0.jsonld?types=SensorSystem\", {\n        headers: {\n          Authorization: `Basic ${frostAuth}`,\n          Accept: \"application/json\"\n        }\n      });\n      console.log(\"üîÑ Response status:\", response.status);\n      if (!response.ok) {\n        throw new Error(`‚ùå Frost API error: ${response.status}`);\n      }\n      const data = await response.json();\n      console.log(\"üì¶ Frost API raw data:\", data);\n\n      // Check if proxy may be returning invalid format\n      if (!data || typeof data !== \"object\" || !Array.isArray(data.data)) {\n        console.error(\"üö® Frost API response is not valid. Possible proxy issue.\");\n        return [];\n      }\n      return data.data || [];\n    } catch (error) {\n      console.error(\"üö® Error fetching Frost data:\", error);\n      return [];\n    }\n  };\n  useEffect(() => {\n    const initMap = async () => {\n      var _geojson$features$;\n      if (mapRef.current) return;\n      console.log(\"üó∫Ô∏è Initializing Mapbox map...\");\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        zoom: 5\n      });\n      mapRef.current.resize(); // üõ† Ensure map renders correctly in container\n\n      new mapboxgl.Marker().setLngLat([10.75, 59.91]).setPopup(new mapboxgl.Popup().setText(\"Test Marker\")).addTo(mapRef.current);\n      const stations = await fetchStations();\n      console.log(`üìä Total stations fetched: ${stations.length}`);\n      if (stations.length === 0) {\n        console.warn(\"‚ö†Ô∏è No stations returned from Frost API\");\n        return;\n      }\n      const geojson = frostToGeoJSON(stations);\n      console.log(\"üåê GeoJSON:\", geojson);\n      console.log(\"üîç First station coords:\", (_geojson$features$ = geojson.features[0]) === null || _geojson$features$ === void 0 ? void 0 : _geojson$features$.geometry.coordinates);\n\n      // ‚ùó Add debug info to detect proxy problems\n      console.log(\"üß™ typeof geojson:\", typeof geojson);\n      console.log(\"üß™ Array.isArray(geojson.features):\", Array.isArray(geojson.features));\n      console.log(\"üß™ Sample feature:\", geojson.features[0]);\n      mapRef.current.on(\"load\", () => {\n        console.log(\"üõ∞Ô∏è Mapbox loaded, adding station data...\");\n\n        // Add source and confirm\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson\n        });\n        console.log(\"üì° Current sources:\", mapRef.current.getStyle().sources);\n\n        // Confirm Mapbox sees the source\n        const source = mapRef.current.getSource(\"stations\");\n        console.log(\"üì§ Mapbox source object:\", source);\n        if (source && source._data) {\n          var _source$_data$feature;\n          console.log(\"üì§ Source _data (first 1):\", (_source$_data$feature = source._data.features) === null || _source$_data$feature === void 0 ? void 0 : _source$_data$feature.slice(0, 1));\n        } else {\n          console.warn(\"‚ö†Ô∏è 'stations' source not found or missing data ‚Äî possible proxy problem.\");\n        }\n\n        // Add a few markers manually to test coordinates\n        geojson.features.slice(0, 5).forEach((feature, i) => {\n          const coords = feature.geometry.coordinates;\n          const name = feature.properties.name;\n          new mapboxgl.Marker({\n            color: \"purple\"\n          }).setLngLat(coords).setPopup(new mapboxgl.Popup().setText(`Station ${i + 1}: ${name}`)).addTo(mapRef.current);\n        });\n        mapRef.current.fitBounds([[4, 57], [31, 72]], {\n          padding: 20\n        });\n\n        // Add main layer for all stations\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\"interpolate\", [\"linear\"], [\"zoom\"], 0, 4, 5, 6, 10, 10, 15, 16],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9\n          }\n        });\n        console.log(\"‚úÖ Station layer added to map\");\n        console.log(\"üß© Map layers:\", mapRef.current.getStyle().layers.map(l => l.id));\n\n        // Add interactivity\n        mapRef.current.on(\"click\", \"stations-layer\", e => {\n          const props = e.features[0].properties;\n          const coords = e.features[0].geometry.coordinates;\n          new mapboxgl.Popup().setLngLat(coords).setHTML(`\n              <strong>${props.name}</strong><br/>\n              ID: ${props.id}<br/>\n              Country: ${props.country}\n            `).addTo(mapRef.current);\n        });\n        mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"pointer\";\n        });\n        mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"\";\n        });\n      });\n    };\n    initMap();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mapContainer,\n    style: {\n      width: \"100%\",\n      height: \"100vh\",\n      borderRadius: \"10px\"\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherStationsMap, \"trBYWQnBQabdsyB7ysINFei525A=\");\n_c = WeatherStationsMap;\nexport default WeatherStationsMap;\nvar _c;\n$RefreshReg$(_c, \"WeatherStationsMap\");","map":{"version":3,"names":["React","useEffect","useRef","mapboxgl","jsxDEV","_jsxDEV","accessToken","FROST_CLIENT_ID","FROST_CLIENT_SECRET","WeatherStationsMap","_s","mapContainer","mapRef","frostToGeoJSON","stations","features","filter","station","geometry","coordinates","map","type","properties","id","name","shortName","country","console","log","length","fetchStations","frostAuth","btoa","response","fetch","headers","Authorization","Accept","status","ok","Error","data","json","Array","isArray","error","initMap","_geojson$features$","current","Map","container","style","center","zoom","resize","Marker","setLngLat","setPopup","Popup","setText","addTo","warn","geojson","on","addSource","getStyle","sources","source","getSource","_data","_source$_data$feature","slice","forEach","feature","i","coords","color","fitBounds","padding","addLayer","paint","layers","l","e","props","setHTML","getCanvas","cursor","ref","width","height","borderRadius","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/seanfagan/Desktop/climate-globe/src/App.js"],"sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport mapboxgl from \"mapbox-gl\";\nimport \"mapbox-gl/dist/mapbox-gl.css\";\n\nmapboxgl.accessToken =\n  \"pk.eyJ1IjoibWFwZmVhbiIsImEiOiJjbTNuOGVvN3cxMGxsMmpzNThzc2s3cTJzIn0.1uhX17BCYd65SeQsW1yibA\";\n\nconst FROST_CLIENT_ID = \"12f68031-8ce7-48c7-bc7a-38b843f53711\";\nconst FROST_CLIENT_SECRET = \"08a75b8d-ca70-44a9-807d-d79421c082bf\";\n\nconst WeatherStationsMap = () => {\n  const mapContainer = useRef(null);\n  const mapRef = useRef(null);\n\n  const frostToGeoJSON = (stations) => {\n    const features = stations\n      .filter((station) => station.geometry && station.geometry.coordinates)\n      .map((station) => ({\n        type: \"Feature\",\n        geometry: {\n          type: \"Point\",\n          coordinates: station.geometry.coordinates,\n        },\n        properties: {\n          id: station.id,\n          name: station.name,\n          shortName: station.shortName || \"Unknown\",\n          country: station.country || \"Norway\",\n        },\n      }));\n\n    console.log(`‚úÖ Converted ${features.length} stations into GeoJSON features`);\n    console.log(\"üîç First station:\", features[0]);\n    return {\n      type: \"FeatureCollection\",\n      features,\n    };\n  };\n\n  const fetchStations = async () => {\n    try {\n      const frostAuth = btoa(`${FROST_CLIENT_ID}:${FROST_CLIENT_SECRET}`);\n      console.log(\"üåç Fetching stations from Frost API...\");\n\n      const response = await fetch(\n        \"/frost/sources/v0.jsonld?types=SensorSystem\",\n        {\n          headers: {\n            Authorization: `Basic ${frostAuth}`,\n            Accept: \"application/json\",\n          },\n        }\n      );\n\n      console.log(\"üîÑ Response status:\", response.status);\n\n      if (!response.ok) {\n        throw new Error(`‚ùå Frost API error: ${response.status}`);\n      }\n\n      const data = await response.json();\n      console.log(\"üì¶ Frost API raw data:\", data);\n\n      // Check if proxy may be returning invalid format\n      if (!data || typeof data !== \"object\" || !Array.isArray(data.data)) {\n        console.error(\"üö® Frost API response is not valid. Possible proxy issue.\");\n        return [];\n      }\n\n      return data.data || [];\n    } catch (error) {\n      console.error(\"üö® Error fetching Frost data:\", error);\n      return [];\n    }\n  };\n\n  useEffect(() => {\n    const initMap = async () => {\n      if (mapRef.current) return;\n\n      console.log(\"üó∫Ô∏è Initializing Mapbox map...\");\n\n      mapRef.current = new mapboxgl.Map({\n        container: mapContainer.current,\n        style: \"mapbox://styles/mapbox/streets-v11\",\n        center: [10.75, 59.91],\n        zoom: 5,\n      });\n\n      mapRef.current.resize(); // üõ† Ensure map renders correctly in container\n\n      new mapboxgl.Marker()\n        .setLngLat([10.75, 59.91])\n        .setPopup(new mapboxgl.Popup().setText(\"Test Marker\"))\n        .addTo(mapRef.current);\n\n      const stations = await fetchStations();\n      console.log(`üìä Total stations fetched: ${stations.length}`);\n\n      if (stations.length === 0) {\n        console.warn(\"‚ö†Ô∏è No stations returned from Frost API\");\n        return;\n      }\n\n      const geojson = frostToGeoJSON(stations);\n      console.log(\"üåê GeoJSON:\", geojson);\n      console.log(\"üîç First station coords:\", geojson.features[0]?.geometry.coordinates);\n\n      // ‚ùó Add debug info to detect proxy problems\n      console.log(\"üß™ typeof geojson:\", typeof geojson);\n      console.log(\"üß™ Array.isArray(geojson.features):\", Array.isArray(geojson.features));\n      console.log(\"üß™ Sample feature:\", geojson.features[0]);\n\n      mapRef.current.on(\"load\", () => {\n        console.log(\"üõ∞Ô∏è Mapbox loaded, adding station data...\");\n\n        // Add source and confirm\n        mapRef.current.addSource(\"stations\", {\n          type: \"geojson\",\n          data: geojson,\n        });\n\n        console.log(\"üì° Current sources:\", mapRef.current.getStyle().sources);\n\n        // Confirm Mapbox sees the source\n        const source = mapRef.current.getSource(\"stations\");\n        console.log(\"üì§ Mapbox source object:\", source);\n\n        if (source && source._data) {\n          console.log(\"üì§ Source _data (first 1):\", source._data.features?.slice(0, 1));\n        } else {\n          console.warn(\"‚ö†Ô∏è 'stations' source not found or missing data ‚Äî possible proxy problem.\");\n        }\n\n        // Add a few markers manually to test coordinates\n        geojson.features.slice(0, 5).forEach((feature, i) => {\n          const coords = feature.geometry.coordinates;\n          const name = feature.properties.name;\n          new mapboxgl.Marker({ color: \"purple\" })\n            .setLngLat(coords)\n            .setPopup(new mapboxgl.Popup().setText(`Station ${i + 1}: ${name}`))\n            .addTo(mapRef.current);\n        });\n\n        mapRef.current.fitBounds(\n          [\n            [4, 57],\n            [31, 72],\n          ],\n          { padding: 20 }\n        );\n\n        // Add main layer for all stations\n        mapRef.current.addLayer({\n          id: \"stations-layer\",\n          type: \"circle\",\n          source: \"stations\",\n          paint: {\n            \"circle-radius\": [\n              \"interpolate\",\n              [\"linear\"],\n              [\"zoom\"],\n              0, 4,\n              5, 6,\n              10, 10,\n              15, 16,\n            ],\n            \"circle-color\": \"#ff6600\",\n            \"circle-stroke-width\": 1,\n            \"circle-stroke-color\": \"#fff\",\n            \"circle-opacity\": 0.9,\n          },\n        });\n\n        console.log(\"‚úÖ Station layer added to map\");\n\n        console.log(\n          \"üß© Map layers:\",\n          mapRef.current.getStyle().layers.map((l) => l.id)\n        );\n\n        // Add interactivity\n        mapRef.current.on(\"click\", \"stations-layer\", (e) => {\n          const props = e.features[0].properties;\n          const coords = e.features[0].geometry.coordinates;\n\n          new mapboxgl.Popup()\n            .setLngLat(coords)\n            .setHTML(`\n              <strong>${props.name}</strong><br/>\n              ID: ${props.id}<br/>\n              Country: ${props.country}\n            `)\n            .addTo(mapRef.current);\n        });\n\n        mapRef.current.on(\"mouseenter\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"pointer\";\n        });\n\n        mapRef.current.on(\"mouseleave\", \"stations-layer\", () => {\n          mapRef.current.getCanvas().style.cursor = \"\";\n        });\n      });\n    };\n\n    initMap();\n  }, []);\n\n  return (\n    <div\n      ref={mapContainer}\n      style={{ width: \"100%\", height: \"100vh\", borderRadius: \"10px\" }}\n    />\n  );\n};\n\nexport default WeatherStationsMap;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}